<project name="Run automated Tests" default="run" basedir=".">
	<taskdef resource="org/pluginbuilder/anttasks/pluginbuildertasks.properties" classpath="../pluginbuilder-anttasks.jar" />
	<typedef resource="org/pluginbuilder/anttasks/pluginbuildertypes.properties" classpath="../pluginbuilder-anttasks.jar" />
	
	<property file="../../build_local.properties" />
	<property file="run-tests.properties" />

	<import file="../build_shared.xml" />

	<path id='emma.lib' >
		<fileset dir='.' includes='*.jar' />
	</path>
	<taskdef resource='emma_ant.properties' classpathref='emma.lib' />
	
	<target name="-init">
		<antcall target="-purgeTestEclipseHost" />
		<property name="eclipse.installation.dir" value="${test.eclipse.base}/eclipse" />
		<property name="eclipse.local.tar.non.server" value="${test.eclipse.zip}" />
		<antcall target="-installTestEclipseHost" />
	</target>

	<target name="-purgeTestEclipseHost">
		<delete dir="${test.eclipse.base}" failOnError="false" />
	</target>

	<target name="-installTestEclipseHost" description="Install Eclipse and all required plug-ins for testing" unless="isEclipseInstallationAvailable">
		<echo message="Installing plug-ins for testing" />

		<condition property="buildResultZipDest" value="${test.eclipse.base}" else="${test.eclipse.host}">
			<equals arg1="${archivePrefix}" arg2="eclipse" />
		</condition>
		
		<unzip dest="${buildResultZipDest}">
			<fileset dir="${buildDirectory}" includes="${buildType}-**/*.zip" excludes="**/${archiveNamePrefix}-*"/>
		</unzip>

		<emma enabled="${emma.enabled}">
			<instr metadatafile="${buildDirectory}/metadata.emma" mode="overwrite">
				<instrpath>
					<fileset dir="${buildResultZipDest}" includes="**/*.jar" />
				</instrpath>
				<!-- http://emma.sourceforge.net/reference/ch02s06s02.html#filtersyntax.ANT -->
		        <filter includes="${emma.filter.includes}" excludes="${emma.filter.excludes}" />
			</instr>
		</emma>

		<unzip dest="${test.eclipse.base}">
			<fileset dir="." includes="eclipse-test-framework*.zip" />
		</unzip>
		<unzip dest="${test.eclipse.host}">
			<fileset dir="." includes="org.pluginbuilder.autotestsuite*.zip" />
		</unzip>
		
		<!-- unpack eclipse after the features because there might be product features extracted which contain a config.ini -->
	 	<antcall target="unpack.eclipse">
			<param name="unpack.eclipse" value="true"/>
		</antcall>
	</target>

	<target name="-runTestSuite" description="Should be called from allTests.xml only">	
		<ant target="core-test" antfile="${test.library.xml}" dir="${test.eclipse.host}">
			<property name="data-dir" value="${test.workspace} -clean" />
    		<property name="plugin-name" value="org.rubypeople.rdt.refactoring.tests -dev ${basedir}/emma.jar" />
    		<property name="classname" value="org.rubypeople.rdt.refactoring.tests.TS_All" />
			<property name="eclipse-home" value="${test.eclipse.host}" />
		</ant>
	</target>
	
	<target name="run" depends="-init,-runTestSuite,-emmaReport" description="Run manually defined tests and create a report.">
		<delete dir="${test.result.dir}" />
		<mkdir dir="${test.result.dir}/xml" />	
		<BundleFileLocator eclipseInstallationRoot="${test.eclipse.host}" bundleId="org.pluginbuilder.autotestsuite.application" filePath="JUNIT.XSL" property="junit.xsl.file" />

		<ant target="collect" antfile="${test.library.xml}" dir="${test.eclipse.host}">
			<property name="includes" value="*.xml" />
			<property name="output-file" value="${test.aggregated.report}" />
		</ant>
		<copy file="${test.eclipse.host}/${test.aggregated.report}" todir="${test.result.dir}/xml" />
		<style style="${junit.xsl.file}" basedir="${test.result.dir}/xml" destdir="${test.result.dir}/html" />
		<antcall target="checkTestResultFileForErrors"/>
	</target>
	
	<target name="-emmaReport">
		
		<mkdir dir="${buildDirectory}/results/coverage" />
		  <emma enabled="${emma.enabled}">
			<report>
				<fileset dir="${buildDirectory}" includes="*.emma"/>
				<fileset dir="${test.eclipse.host}" includes="*.ec"/>
			    <html outfile="${buildDirectory}/results/coverage/coverage.html" />

				<sourcepath>
					<dirset dir="${buildDirectory}/plugins">
					</dirset>
				</sourcepath>
				
			</report>
		  </emma>
	</target>
	
	<target name="checkTestResultFileForErrors">
		<echo message="Checke auf Fehler: ${test.aggregated.report}"/>

        <condition property="isErrorOrFailure">
            <hasErrorOrFailure reportFile="${test.result.dir}/xml/${test.aggregated.report}" />
        </condition>

        <antcall target="-markErrorOrFailure" />        
	</target>

	<target name="-markErrorOrFailure" if="isErrorOrFailure">
		<echo level="error" message="TESTS FAILED"/>
	</target>
	
</project>
