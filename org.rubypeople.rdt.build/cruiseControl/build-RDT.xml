<!-- Delegating build script, used by cruisecontrol to build MY_PROJECT_1.
       Note that the basedir is set to the checked out project -->
<project name="build-RDT" default="build">
	<!--
	basedir="/home/markus/java/cruiseControlWorkingArea/checkout/RDT"> -->
	<target name="propertiesCCBuild">		
		<property file="build-RDT.properties" />
	</target>
	
	<target name="clean">
		<echo message="Cleaning directory ${buildDirectory}"/>
		<delete dir="${buildDirectory}"/>
		<mkdir dir="${buildDirectory}"/>
	</target>
	
	<target name="featureVersion">
		<!-- use the label provided from the EclipseLableProvider -->
		<!-- <echo message="Using feature version ${label}"/> -->
		<echo file="${buildDirectory}/version.properties" message="featureVersion=${label}"/>
	</target>
	
	<target name="build">

		<java classname="org.eclipse.core.launcher.Main" fork="true" failonerror="true" jvmargs="${extraArgs}">
			<arg value="-ws" />
			<arg value="${ws}" />
			<arg value="-os" />
			<arg value="${os}" />
			<arg value="-application" />
			<arg value="org.eclipse.ant.core.antRunner" />
			<arg value="-buildfile" />
			<arg value="${buildfile}" />
			<arg value="${buildTarget}" />
			<arg value="-data" />
			<arg value="${buildDirectory}/workspace" />
			<arg value="${verboseAnt}" />
			<jvmarg value="${usePserver}" />
			<jvmarg value="${dontRunTests}" />
			<jvmarg value="-Dbasews=${ws}" />
			<jvmarg value="-Dbaseos=${os}" />
			<jvmarg value="-Dbasearch=${arch}" />
			<jvmarg value="-Dbuilder=${builderDirectory}" />
			<jvmarg value="${testNoclean}"/>
			<jvmarg value="-DjavacFailOnError=true"/>
			<jvmarg value="-DbuildDirectory=${buildDirectory}"/>
			<jvmarg value="-DbaseLocation=${eclipseDir}"/>
			<jvmarg value="-DeclipseAutomatedTestHome=${eclipseAutomatedTestHome}"/>
			<jvmarg value="-Drdt.rubyInterpreter=${rubyInterpreter}" />
			<jvmarg value="-Drdt-tests-workspace=${buildDirectory}/workspace-rdt-tests" />
			<jvmarg value="-Ddocbook.root=${docbookRoot}" />
			<!--<jvmarg value="${extraArgs}"/>-->
			<classpath>
				<pathelement location="${eclipseDir}/startup.jar" />
			</classpath>
		</java>
	</target>
	

	<target name="dist" depends="propertiesCCBuild,clean,featureVersion,build">
	</target>
	
	<target name="0.7.0.RC1">
		<property name="cvsLabel" value="R2005-12-22_0-7-0_RC1"/>
		<property name="label" value="0.7.0.512282200RC1"/>
		<antcall target="integration"/>
	</target>

	<target name="integration">
		<!-- the only difference to a nightly build is the buildType which leads to setting a differnt
		updateSiteUrl in feature.xml -->
		<property name="buildDirectory" value="/tmp/rdt-${label}"/>
		<!-- properties which should override the values of org.rubypeople.rdt/bootstrap/build.properties must be
		specified via -D arguments for the call to eclipseRunner -->
		<property name="extraArgs" value="-DbuildType='I' -DfetchTag=${cvsLabel}"/>
		<property file="build-RDT.properties" />
		<antcall target="clean"/>
		<antcall target="featureVersion"/>		
		<antcall target="build"/>
	</target>
		
	<target name="updateSiteXml" if="label">
		<property name="siteXmlFile" value="site.xml"/>
		<property name="placeHolder" value="&lt;!--AddNewFeatureElementHere--&gt;"/>
		<property name="featureUrl" value="features/org.rubypeople.rdt_${label}.jar"/>
		<!-- replacevalue nested element does not support variable replacement. Therefore a two step approach:
			1. add a feature element
			2. add newline -->
		<echo message="Adding feature version ${label} to ${siteXmlFile}"/>
		<replace file="${siteXmlFile}" token="${placeHolder}" value="&lt;feature url=&quot;${featureUrl}&quot; id=&quot;org.rubypeople.rdt&quot; version=&quot;${label}&quot;&gt; &lt;category name=&quot;RubyEclipseIntegrationBuilds&quot;/&gt; &lt;/feature&gt; ${placeHolder}"/>
		<replace file="${siteXmlFile}" token="${placeHolder}">
			<replacevalue>
	&lt;!--AddNewFeatureElementHere--&gt;</replacevalue>
		</replace>
	</target>

	<target name="deploy" if="label">
		<!-- This target is used for manually deploying integration and release builds
		Nightly builds are deployed using cruise controls config.xml file -->
		<property name="downloadUser" value="rubypeople"/>
		<property name="downloadHost" value="download.rubypeople.org"/>
		<property name="buildTypeDirectory" value="integration"/>
		<property name="downloadDirectory" value="~/subdomains/download/httpdocs/${buildTypeDirectory}/${label}"/>
		<property name="updateSiteDirectory" value="~/subdomains/updatesite/httpdocs/${buildTypeDirectory}"/>
		<property name="buildDirectory" value="/tmp/rdt-${label}/dist"/>
		<echo message="Copying ${buildDirectory} to ${downloadUser}@${downloadHost}:${downloadDirectory}"/>
		<sshexec host="${downloadHost}"
			username="${downloadUser}"
			keyfile="${user.home}/.ssh/id_download"
			command="mkdir --parents ${downloadDirectory}"/>
		<scp todir="${downloadUser}:usekeyinsteadofpw@${downloadHost}:${downloadDirectory}"
			keyfile="${user.home}/.ssh/id_download"
			passphrase="">
			<fileset dir="${buildDirectory}"/>
		</scp>
		<echo message="Copying files to updatesite: ${downloadUser}@${downloadHost}:${downloadDirectory}"/>
		<property name="updateSiteScpUrl" value="${downloadUser}@${downloadHost}:${updateSiteDirectory}"/>
		<scp todir="${updateSiteScpUrl}"
			keyfile="${user.home}/.ssh/id_download"
			passphrase="">
			<fileset dir="${buildDirectory}/updateSite">
				<exclude name="site.xml"/>
			</fileset>
		</scp>
		<echo message="Updating site.xml"/>
		<property name="siteXmlFile" value="/tmp/site.xml"/>
		<scp file="${updateSiteScpUrl}/site.xml" 
			localTofile="${siteXmlFile}"
			keyfile="${user.home}/.ssh/id_download"
			passphrase=""/>
		<antcall target="updateSiteXml"/>
		<scp file="${siteXmlFile}" 
			todir="${updateSiteScpUrl}"
			keyfile="${user.home}/.ssh/id_download"
			passphrase=""/>
	</target>
</project>
