<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN" 
	"file:///docbook/dtd/docbookx.dtd">
<book>
	<title>Ruby Development Tools</title>
	<chapter id="GettingStarted">
		<title>Getting Started</title>
		<sect1 id="preparingTheWorkbench">
			<title> Preparing the Workbench </title>
			<para> In this section, you will verify that the workbench is 
				properly set up for Ruby development. </para>
			<para> The following is assumed: </para>
			<itemizedlist>
				<listitem>
					<para>You are starting with a new workbench installation 
						with default settings.</para>
				</listitem>
				<listitem>
					<para>You are familiar with the basic workbench mechanisms, 
						such as views and perspectives. </para>
				</listitem>
			</itemizedlist>
			<para> If you&#39;re not familiar with the basic workbench 
				mechanisms, please see the Getting Started chapter of the 
				Workbench User Guide. </para>
			<sect2 id="importantSettings">
				<title>Important Settings</title>
				<orderedlist>
					<listitem>
						<para> Open the workbench preferences by selecting the 
							menu item <emphasis>Window &gt; 
							Preferences</emphasis>. </para>
					</listitem>
					<listitem>
						<para> Go to the <emphasis>Installed 
							Interpreters</emphasis> preference page by 
							selecting <emphasis>Ruby &gt; Installed 
							Interpreters</emphasis> in the tree pane on the 
							left. Click the <emphasis>Add button</emphasis> to 
							define the location of your ruby executable. A 
							dialog opens where you can specify a name and path. 
							Example settings are: name="ruby 1.6.7", 
							path="/usr/bin". The name can be chosen freely. The 
							path must contain a file "ruby" or "rubyw.exe". </para>
					</listitem>
					<listitem>
						<para> Leave the preferences by clicking on 
							<emphasis>OK</emphasis>. </para>
					</listitem>
				</orderedlist>
			</sect2>
		</sect1>
			</chapter>
	<chapter id="Concepts">
		<title>Concepts</title>
		<sect1 id="rubyProjects">
			<title>Ruby projects</title>
			<para>A Ruby project contains source code and related files for 
				building a Ruby program.</para>
			<para>A Ruby project also maintains a model of its contents. This 
				model includes information about the type hierarchy, references 
				and declarations of Ruby elements. This information is 
				constantly updated as the user changes the Ruby source 
				code.</para>
			<para>You can organize Ruby projects in one way 
				currently:<itemizedlist> <listitem> Using the project as the 
				source container. This is the recommended organization for 
				simple projects. </listitem> </itemizedlist> </para>
		</sect1>
		<sect1 id="RubyPerspectives">
			<title>Ruby perspectives</title>
			<para>The Ruby development tools contribute the following 
				perspectives to the workbench:</para>
			<sect2 id="RubyPerspectives_Ruby">
				<title>Ruby</title>
				<para>A perspective designed for working with Ruby projects. It 
					consists of an editor area and the following views:</para>
				<itemizedlist>
					<listitem> Ruby Resources View </listitem>
					<listitem>Outline </listitem>
					<listitem>Console </listitem>
				</itemizedlist>
			</sect2>
			<sect2 id="RubyPerspectives_RubyDebug">
				<title>Debug</title>
				<para>A perspective designed for debugging your Ruby program. 
					It includes an editor area and the following views.</para>
				<itemizedlist>
					<listitem> Debug </listitem>
					<listitem> Breakpoints </listitem>
					<listitem> Expressions </listitem>
					<listitem> Variables </listitem>
					<listitem> Display </listitem>
					<listitem> Outline </listitem>
					<listitem> Console </listitem>
				</itemizedlist>
			</sect2>
		</sect1>
		<sect1 id="RubyResourcesView">
			<title>Ruby Resources View</title>
			<para>The Ruby Resources View provides the same features as the 
				regular navigator does (e.g. optional linking between editor 
				and Ruby Resources View, customizable Filtering, collapsing the 
				tree, context menu). In addition to that, there is a toggle to 
				show only ruby resources (.rb, .rbw and .cgi files).</para>
			<para> As for the regular navigator, there can also be a filter 
				defined for the Ruby Resources View. Per default there are two 
				entries, *.class and .*, in the filter list. This can be 
				customized. For example, if you are sick of xml files, you can 
				add the following declaration to a plugin descriptor, e.g. to 
				ECLIPSE_HOME/plugins/org.rubypeople.rdt.ui/plugin.xml:</para>
			<programlisting><![CDATA[ 
<extension point="org.eclipse.ui.ide.resourceFilters"> 
    <filter selected="false" pattern="*.xml"></filter> 
</extension> ]]> </programlisting>
			<figure>
				<title>Ruby Resources View</title>
				<graphic fileref="../images/rubyResources.png" format="PNG"/>
			</figure>
		</sect1>
		<sect1 id="RubyEditor">
			<title>Ruby Editor</title>
			<para>The Ruby editor provides specialized features for editing 
				Ruby code.</para>
			<para>Associated with the editor is a Ruby-specific Outline view, 
				which shows the structure of the active Ruby script. It is 
				updated as the user edits the script.</para>
			<para>The editor includes the following features:</para>
			<itemizedlist>
				<listitem>Syntax highlighting</listitem>
				<listitem>Content/code assist</listitem>
				<listitem>Code formatting</listitem>
				<listitem>Integrated debugging features</listitem>
			</itemizedlist>
			<para>The most common way to invoke the Ruby editor is to open a 
				Ruby file from the Navigator or Ruby Resource View using pop-up 
				menus or by clicking the file (single or double-click depending 
				on the user preferences). You can also open the editor by 
				opening Ruby elements, such as types, methods, or fields, from 
				other views.</para>
			<sect2 id="CodeCompletion">
				<title>Code completion</title>
				<para> If you press Ctrl+space in the ruby editor, a list with 
					information from the current ruby file is displayed. This 
					information includes classes, modules, globals, methods and 
					variables. There are also suggestions for keywords and some 
					pre-defined globals. The keywords and globals are only 
					shown if you have already typed at least one character. If 
					the "token" preceding the cursor does match the beginning 
					of any suggestions you will get no suggestions. For RDT 
					0.4.2 an extension is planned which also provides classes 
					and modules from required ruby files. </para>
			</sect2>
			<sect2 id="CodeFormatting">
				<title>Code formatting</title>
				<para>The code formatter formats either the whole file or the 
					current selection, if there is one. In the latter case all 
					the lines, which are covered from the selection, are 
					formatted. The code formatter does not insert new lines but 
					only indents existing lines. </para>
				<para>There are two options to customize the behaviour of the 
					formatter:</para>
				<itemizedlist>
					<listitem>
						<para>The number of characters per indentation 
							level</para>
					</listitem>
					<listitem>
						<para>The character used for indentation can either be 
							space or tab</para>
					</listitem>
				</itemizedlist>
				<para>E.g. if you format a if/then/else block, the lines of the 
					if and else blocks have an indentation level of 1 while the 
					lines with keywords have an indentation level of 0. The 
					default is to use spaces and two characters per indentation 
					level, which indents the if and else blocks with two 
					spaces. If you changed the second option to use tabs, the 
					if and else blocks would be indented with two tabs.</para>
				<para> When the second options is set to use spaces, typing a 
					tab character in the editor inserts spaces instead of a 
					tabs, too. The number of spaces used to replace the tab is 
					equal to the number of characters per indentation level. By 
					configuring the tab replacing settings with the code 
					formatter settings, the difference between rawly entered 
					code and formatted code can be minimized. </para>
				<warning>
					<para>In the current version (0.4.1) the code formatter 
						does not recognize regular expressions, which are 
						spread over multiple lines. That implies that these 
						regular expressions might be indented.</para>
				</warning>
			</sect2>
		</sect1>
		<sect1 id ="ConsoleView">
			<title>Console View</title>
			<para>The console view contains the output of a program. If the 
				output of a ruby program contains a stack trace, every stack 
				frame is clickable: When you place the mouse over a line in a 
				stack trace, the pointer changes to the hyperlink symbol and 
				clicking the hyperlink opens the associated file and moves to 
				the appropriate line. If the file does not exist in the 
				workspace, the Ruby External Editor is opened, which displays 
				the file content read-only. </para>
			<figure>
				<title>Console stack Trace with hyperlinks</title>
				<graphic fileref="../images/clickableStackTrace.png" 
					format="PNG"/>
			</figure>
		</sect1>
		<sect1 id="OutlineView">
			<title>Outline View</title>
			<para> The outline view displays the structure of the currently 
				selected editor. </para>
			<figure>
				<title>Outline View</title>
				<graphic fileref="../images/outline.png" format="PNG"/>
			</figure>
		</sect1>
		<sect1 id="RunningARubyApplication">
			<title>Running a Ruby application</title>
			<sect2 id="ContextMenu"><title>Starting from Ruby Resource View</title>
				<para> The context menu of a ruby file in the Ruby Resource 
					View has a run entry from which the file can be started in 
					run or debug mode. </para>			
			<figure>
				<title>Run from context menu</title>
				<graphic fileref="../images/runContextMenu.png" format="PNG"/>
			</figure>
			</sect2>
			<sect2 id="MainMenu"><title>Starting from main menu</title>
				<para>The Run main menu also offers a menu point for starting a
					ruby application. Which file is started is determined by the 
					active part (marked with the blue border). This can be
					the editor or the Ruby Resource View for example. If the Ruby Resource
					View is active, the file selected in the resource tree is started.
					If the editor is the active part, the file in the active editor is 
					started.</para>			
			<figure>
				<title>Run from main menu</title>
				<graphic fileref="../images/runMenu.png" format="PNG"/>
			</figure>
			</sect2>
			<sect2 id="Configuration">
				<title>Run configuration</title>
				<para>Every time a file is started from one of the described 
					menu items, a run configuration is created. If the file is 
					started a second time, this run configuration is used 
					again. That allows to add parameters for the start, change 
					the working directory or the interpreter to start with. 
					</para>
				<para> The following library paths are always added when the 
					application is started (using the -I option of the ruby 
					interpreter) and are not listed in the configuration 
					dialog:</para>
				<itemizedlist>
					<listitem>
						<para>The directory in which the started file 
							resides</para>
					</listitem>
					<listitem>
						<para>The path of the project in which the started file 
							resides</para>
					</listitem>
					<listitem>
						<para>The path of all dependent projects of the started 
							file's project</para>
					</listitem>
				</itemizedlist>
				<figure>
					<title>Run from configuration</title>
					<graphic fileref="../images/runConfiguration.png" 
						format="PNG"/>
				</figure>
			</sect2>
		</sect1>
		<sect1 id="usingTheDebugger">
			<title>Using the Debugger</title>
			<sect2>
				<title>Prerequisites</title>
				<para>If you can debug your ruby application depends on the 
					version of the ruby interpreter you are using. Ruby 1.6.8 
					works on both Linux and Windows, 1.8.0 works also on 
					Windows. For further information see <ulink 
					url="http://213.203.244.123/wiki/wiki.phtml#Prerequisites_for_the_debugger"></ulink> 
					</para>
										
			</sect2>
			<sect2 id="debuggingYourApplication">
				<title>Debugging your Application</title>
				<itemizedlist>
					<listitem>
						<para>Open your ruby file and set a breakpoint like you 
							would set a breakpoint in a java file</para>
					</listitem>
					<listitem>
						<para>Select <emphasis>Run &gt; Debug As &gt; Ruby 
							Application</emphasis>. The Debug perspective will 
							open:</para>
						<figure>
							<title>Debug Perspective</title>
							<graphic fileref="../images/debug.png" 
								format="PNG"/>
						</figure>
					</listitem>
					<listitem>
						<para>In the launch view use <emphasis> step into, step 
							over, step return</emphasis> to step through the 
							code. Use the <emphasis>resume button </emphasis> 
							to resume the application. </para>
					</listitem>
					<listitem>
						<para>In the variable view:</para>
						<itemizedlist>
							<listitem>
								<para>Press <emphasis>Show Type 
									Names</emphasis> to show the type of each 
									variable</para>
							</listitem>
							<listitem>
								<para>Check <emphasis>Show Constants</emphasis> 
									to display constants, check <emphasis>Show 
									Class Variables</emphasis> to display class 
									variables </para>
							</listitem>
						</itemizedlist>
						<para> In the screenshot above the java debug actions 
							are disabled, so that only the ruby debug commands 
							<emphasis>Show Constants</emphasis> and 
							<emphasis>Show Class Variables</emphasis> appear. 
							If you want to disable/enable either ruby or java 
							debug actions, go to<emphasis> Window &gt; 
							Preferences &gt; Debug &gt; Debug Action 
							Groups</emphasis> and select the appropriate debug 
							actions. </para>
					</listitem>
				</itemizedlist>
				<sect3>
					<title>Variables view</title>
					<para> The Variables view shows instance variables, class 
						variables and constants of objects. Use the "Show Type 
						Names" button on the view bar to display/hide the names 
						of type.</para>
					<figure>
						<title>Variables View with type names mode on</title>
						<graphic fileref="../images/variableViewWithTypes.png" 
							format="PNG"/>
					</figure>
					<para> In the above screenshot there is a variable barney 
						of type person. The object is represented by the return 
						value of the to_s method, in this case 
						"#&lt;Person:0x2ae7d20&gt;". There is one instance 
						variable @name of type String and value "Barney".</para>
					<sect4>
						<title>Arrays</title>
						<para>Assume the following code:</para>
						<programlisting> <![CDATA[
class Person 
  def initialize(name)
   @name = name
  end
  
  def to_s()
    return @name.to_s
  end
end

persons = [] 
persons &lt;&lt; Person.new('Barney')
persons &lt;&lt; Person.new('Moe')           
]]> </programlisting>
						<para> After the last assignment the variable view 
							shows the content of the array. Note that the name 
							appears as description for the object, because to_s 
							is overriden.</para>
						<figure>
							<title>Array presentation in Variables View</title>
							<graphic 
								fileref="../images/arrayInVariablesView.png" 
								format="PNG"/>
						</figure>
					</sect4>
					<sect4>
						<title>Hashes</title>
						<para> In order to show how hashes are presented in the 
							variables view, a hash is created:</para>
						<programlisting><![CDATA[
persons = Hash[ Person.new('Lisa') =&gt; Person.new('Marge'), 
                            Person.new('Maggie') =&gt; Person.new('Marge')]
]]> </programlisting>
						<para>The view shows the name of the hash with the 
							number of elements in the first place. If you 
							expand the item, there will be a line for every 
							key/value pair in the hash. Expanding a key/value 
							pair will show the content of the value. If you 
							want to know more about the key, select "Inspect 
							key" from the context menu:</para>
						<figure>
							<title>Hash presentation in Variables View</title>
							<graphic 
								fileref="../images/hashInVariablesView.png" 
								format="PNG"/>
						</figure>
					</sect4>
				</sect3>
				<sect3>
					<title>Breakpoints view</title>
					<para>Use the Breakpoints view to remove ruby 
						breakpoints.</para>
				</sect3>
				<sect3>
					<title>Expressions view</title>
					<para> Results of ruby expression evaluation are 
						displayed here. Evaluation takes place: </para>
					<itemizedlist>
						<listitem>
							<para>If you select text in the editor and run 
								"Inspect" from the context menu</para>
						</listitem>
						<listitem>
							<para>If you use the display view to enter ruby 
								expressions</para>
						</listitem>
						<listitem>
							<para>If you select "inspect key" in the context 
								menu of a hash value in the variable view</para>
						</listitem>
					</itemizedlist>
				</sect3>
				<sect3>
					<title>Display view</title>
					<para> Enter your text in the Display view and run "Ruby 
						inspect" from the context menu. The Expression view 
						will open and show the resitemizedlistt of the 
						expression. The expression is evaluated in the context 
						of the selected stack frame in the Launch view.</para>
					<para> The following example shows an expression which 
						creates a hash with all global variables mapped to 
						their values (the "Content Assist" menu entry is only 
						valid in the context of a java program):</para>
					<figure>
						<title>Display View</title>
						<graphic fileref="../images/displayView.png" 
							format="PNG"/>
					</figure>
					<para>The Expressions view shows the 
						resitemizedlistt:</para>
					<figure>
						<title>Global variables in Expression View</title>
						<graphic 
							fileref="../images/expressionViewWithGlobalVariables.png" 
							format="PNG"/>
					</figure>
				</sect3>
			</sect2>
			<sect2 id="debuggingRubyLibraries">
				<title>Debugging into ruby libraries</title>
				<para> If there are exceptions in a ruby library file, the 
					program halts there and the ruby file is opened read only. 
					That is because the library file is not part of the eclipse 
					workspace. In order to edit such a file, a ruby project can 
					be created upon the library directory: </para>
				<itemizedlist>
					<listitem>
						<para>Select <emphasis>New &gt; Project &gt; Ruby 
							Project</emphasis></para>
					</listitem>
					<listitem>
						<para>Enter project name, e.g site-ruby</para>
					</listitem>
					<listitem>
						<para>In the section <emphasis>Project 
							contents</emphasis> deselect <emphasis>Use 
							Default</emphasis> and enter the directory, e.g 
							/usr/local/lib/site-ruby/1.6. Note, that there must 
							be write access to that directory, because eclipse 
							wants to create a .project file. </para>
					</listitem>
				</itemizedlist>
			</sect2>
			<sect2>
				<title>Known limitations</title>
				<para>The ruby debugger is still under development and there 
					are some limitations, which must be considered when 
					debugging your application:</para>
				<itemizedlist>
					<listitem>
						<para>In order to get the debug information about the 
							running program, eclipse starts a ruby debugger 
							before the execution of your application and talks 
							to that ruby debugger via socket. Currently this 
							socket is set to 1098 and if this socket is bound 
							already debugging is not possible. (The java 
							debugger searches for a free socket before; that 
							behaviour should be implemented for the 
							ruby debugger as well)</para>
					</listitem>
					<listitem>
						<para>Threads are not refreshed regularly, i.e. you do 
							not see the threads your application creates before 
							a breakpoint (or exception or end of step) is 
							reached</para>
					</listitem>
					<listitem>
						<para>Only one ruby program can be debugged 
							concurrently (there is a socket bind exception if 
							you try to debug more than on ruby program at the 
							same time)</para>
					</listitem>
					<listitem>
						<para>Breakpoints are not saved when eclipse is 
							closed</para>
					</listitem>
				</itemizedlist>
				<sect3>
					<title>Writing Bug Reports</title>
					<para>In order to provide useful information in case of 
						errors, you shoitemizedlistd turn on verbose mode for 
						the ruby debugger:</para>
					<orderedlist>
						<listitem>
							<para>open file 
								ECLIPSE_HOME/plugins/org.rubypeople.rdt.launching/ruby/eclipseDebug.rb</para>
						</listitem>
						<listitem>
							<para>set ECLIPSE_VERBOSE = true</para>
						</listitem>
						<listitem>
							<para>save file</para>
						</listitem>
						<listitem>
							<para>After you started debugging, the console 
								shows additional information (appears red, if 
								stderr is printed red): </para>
							<figure>
								<title>Verbose debug information in 
									console</title>
								<graphic fileref="../images/verboseConsole.png" 
									format="PNG"/>
							</figure>
						</listitem>
						<listitem>
							<para>go to <ulink 
								url="http://sourceforge.net/projects/rubyeclipse"></ulink> 
								and add the console output to your bug 
								report.</para>
						</listitem>
					</orderedlist>
				</sect3>
			</sect2>
		</sect1>		
	</chapter>
	<chapter id="TipsNTricks">
		<title>Tips and tricks</title>
	</chapter>
	<chapter id="WhatsNew">
		<title>What's new</title>
		<para>New in RDT 0.4.1:</para>
		<itemizedlist>			
			<listitem> Clickable stack traces in console (click to open editor) </listitem>
			<listitem> Ruby Resources View updated, now more like regular navigator </listitem>
    		<listitem> Outline: improved and faster </listitem>
			<listitem> Warnings and error annotations for ruby code (experimental, enable in preferences to try) </listitem>			    		
			<listitem> Editor: convert typed tab to spaces </listitem>
			<listitem> Code Formatter: use tabs or spaces for indentation </listitem>			
			<listitem> Debugger: debug with 1.8.0 on windows </listitem>
		</itemizedlist>
		<para>New in RDT 0.4.0:</para>
		<itemizedlist>
			<listitem> Runs with Eclipse 3.0 </listitem>
			<listitem> Code-completion </listitem>
			<listitem> keywords </listitem>
			<listitem> All elements of current script. </listitem>
			<listitem> Classes and modules from library. </listitem>
			<listitem> Outline View </listitem>
			<listitem> Show globals </listitem>
			<listitem> Show require statements </listitem>
			<listitem> Show instance variables </listitem>
			<listitem> Show class variables </listitem>
			<listitem> Selecting an element selects the text and reveals it in 
				the editor </listitem>
			<listitem> Ruby Preferences </listitem>
			<listitem> Ruby Library Page to select a directory for ruby library 
				installation </listitem>
			<listitem> Ruby Perspective </listitem>
			<listitem> Shows Outline View </listitem>
			<listitem> Offers Outline view shortcut (in show view menu) 
				</listitem>
			<listitem> Shows new ruby project, new file, new folder when 
				clicking "New wizard" icon </listitem>
			<listitem> Ruby Resource View </listitem>
			<listitem> Offers new ruby project, new file, new folder on right 
				click of an element </listitem>
		</itemizedlist>
	</chapter>
</book>