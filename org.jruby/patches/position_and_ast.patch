Index: test/testPositions.rb
===================================================================
--- test/testPositions.rb	(revision 2701)
+++ test/testPositions.rb	(working copy)
@@ -778,7 +778,7 @@
 nil,
 nil, #['NewlineNode',0,3,0,22],
   ['DStrNode',0,2,0,21],
-    ['StrNode',1,1,5,10],  # ENEBO: What should this really be?
+    ['StrNode',0,1,0,10],  # ENEBO: What should this really be? # MIRKO: This would be much easier for the rewriter
     ['EvStrNode',1,1,10,17],
       nil, #['NewlineNode',1,1,12,18],
         ['VCallNode',1,1,12,16],
@@ -1037,7 +1037,7 @@
 list = [
 nil,
 nil, #['NewlineNode',0,1,0,9]
-  ['LocalAsgnNode',0,0,0,1],
+  ['LocalAsgnNode',0,0,0,22],
     ['RescueNode',0,0,10,22],
       ['RescueBodyNode',0,0,10,22],
         ['FCallNode',0,0,17,22],
@@ -1142,3 +1142,372 @@
 end
 EOF
 
+#test calls:
+list = [
+nil,
+nil,
+['CallNode', 0, 0, 0, 10],
+nil
+]
+test_tree(list, <<END)
+String.new
+END
+
+list = [
+nil,
+nil,
+['CallNode', 0, 0, 0, 12],
+nil
+]
+test_tree(list, <<END)
+String.new()
+END
+
+list = [
+nil,
+nil,
+['CallNode', 0, 0, 0, 17],
+nil
+]
+test_tree(list, <<END)
+String.new("aaa")
+END
+
+list = [
+nil,
+nil,
+['CallNode', 0, 0, 0, 24],
+nil
+]
+test_tree(list, <<END)
+String.new "aaa" + "bbb"
+END
+
+list = [
+nil,
+nil,
+['CallNode', 0, 0, 0, 17],
+nil
+]
+test_tree(list, <<END)
+String.new 5.to_s
+END
+
+#test arrays
+
+list = [
+nil,
+nil,
+['CallNode', 0, 0, 0, 30],
+['ConstNode', 0, 0, 0, 5],
+['ArrayNode', 0, 0, 10, 30]
+]
+test_tree(list, <<END)
+Array.new "aa", 11000, 20, 340
+END
+
+list = [
+nil,
+nil,
+['CallNode', 0, 0, 0, 26],
+]
+test_tree(list, <<END)
+Array.new String.new(1234)
+END
+
+list = [
+nil,
+nil,
+['ArrayNode', 0, 0, 0, 12],
+]
+test_tree(list, <<END)
+[55, "test"]
+END
+
+list = [
+nil,
+nil,
+nil,
+['ConstNode', 0, 0, 0, 5],
+['ArrayNode', 0, 0, 9, 14],
+]
+test_tree(list, <<END)
+Array.new("a")
+END
+
+list = [
+nil,
+nil,
+nil,
+['DAsgnNode', 0, 0, 12, 19],
+nil,
+nil,
+]
+test_tree(list, <<END, "dasgn node")
+[].each do |element|
+end
+END
+
+list = [
+nil,
+nil,
+nil,
+nil,
+nil,
+['DAsgnNode', 0, 0, 12, 20],
+['DAsgnNode', 0, 0, 22, 30],
+nil,
+nil,
+]
+test_tree(list, <<END, "multiple dasgn nodes")
+[].each do |element1, element2|
+end
+END
+
+list = [
+nil,
+nil,
+['MultipleAsgnNode', 0, 0, 0, 13],
+['ArrayNode', 0, 0, 0, 4],
+['LocalAsgnNode', 0, 0, 0, 1],
+['LocalAsgnNode', 0, 0, 3, 4],
+['ArrayNode', 0, 0, 7, 13],
+['ZArrayNode', 0, 0, 7, 9],
+['HashNode', 0, 0, 11, 13],
+]
+test_tree(list, <<END, "multipleasgn node")
+a, b = [], {}
+END
+
+list = [
+nil,
+nil,
+['IterNode', 0, 2, 15, 34],
+['DAsgnNode', 0, 0, 19, 20],
+nil,
+['FCallNode', 1, 1, 24, 30],
+['ArrayNode', 1, 1, 29, 30],
+['DVarNode', 1, 1, 29, 30],
+['CallNode', 0, 2, 0, 34],
+['ArrayNode', 0, 0, 0, 9],
+['FixnumNode', 0, 0, 1, 2],
+['FixnumNode', 0, 0, 4, 5],
+['FixnumNode', 0, 0, 7, 8]
+]
+test_tree(list, <<END, "iter node")
+[1, 2, 3].each do |i|
+  puts i
+end
+END
+
+list = [
+nil,
+nil, #['NewlineNode', 0, 1, 0, 7],
+['LocalAsgnNode', 0, 0, 0, 6],
+['CallNode', 0, 0, 0, 6],
+['LocalVarNode', 0, 0, 0, 1],
+['ArrayNode', 0, 0, 5, 6],
+['FixnumNode', 0, 0, 5, 6]
+]
+test_tree(list, <<END, "+= assignment")
+a += 5
+END
+
+list = [
+nil,
+nil, #['NewlineNode', 0, 6, 0, 70],
+['ClassNode', 0, 6, 0, 70],
+['Colon2Node', 0, 0, 6, 10],
+nil, #['NewlineNode', 1, 6, 13, 67],
+['DefnNode', 1, 5, 13, 66],
+['ArgumentNode', 1, 1, 17, 21],
+['ArgsNode', 2, 2, 22, 22],
+nil, #['NewlineNode', 2, 5, 26, 61],
+['WhileNode', 2, 4, 26, 60],
+['TrueNode', 2, 2, 32, 36],
+nil, #['NewlineNode', 3, 4, 43, 53],
+['FCallNode', 3, 3, 43, 52],
+['ArrayNode', 3, 3, 48, 52],
+['TrueNode', 3, 3, 48, 52]
+]
+test_tree(list, <<END)
+class Test
+  def test
+    while true
+      puts true
+    end
+  end
+end
+END
+
+list = [
+nil,
+nil, #['NewlineNode', 0, 4, 0, 78],
+['ClassNode', 0, 4, 0, 78],
+['Colon2Node', 0, 0, 6, 14],
+nil, #['NewlineNode', 1, 4, 17, 75],
+['DefnNode', 1, 3, 17, 73],
+['ArgumentNode', 1, 1, 21, 27],
+['ArgsNode', 1, 1, 28, 32],
+['ListNode', 1, 1, 28, 32],
+['ArgumentNode', 1, 1, 28, 29],
+['ArgumentNode', 1, 1, 31, 32],
+nil, #['NewlineNode', 2, 3, 38, 68],
+['LocalAsgnNode', 2, 2, 38, 66],
+['CallNode', 2, 2, 42, 66],
+['ConstNode', 2, 2, 42, 50],
+['ArrayNode', 2, 2, 62, 66],
+['LocalVarNode', 2, 2, 62, 63],
+['LocalVarNode', 2, 2, 65, 66]
+]
+test_tree(list, <<END)
+class Triangle
+  def printC a, b 
+    c = Triangle.hypotenuse a, b 
+  end 
+end
+END
+
+list = [
+nil,
+nil, #['NewlineNode', 0, 7, 0, 91],
+['ClassNode', 0, 7, 0, 90],
+['Colon2Node', 0, 0, 6, 10],
+['BlockNode', 1, 7, 13, 87],
+nil, #['NewlineNode', 1, 4, 13, 49],
+['DefsNode', 1, 3, 13, 48],
+['ConstNode', 1, 1, 17, 21],
+['ArgumentNode', 1, 1, 22, 26],
+['ArgsNode', 1, 1, 27, 31],
+['ListNode', 1, 1, 27, 31],
+['ArgumentNode', 1, 1, 27, 31],
+nil, #['NewlineNode', 2, 3, 36, 43],
+['ReturnNode', 2, 2, 36, 42],
+nil, #['NewlineNode', 1, 7, 13, 87],
+['DefsNode', 4, 6, 51, 86],
+['SelfNode', 4, 4, 55, 59],
+['ArgumentNode', 4, 4, 60, 64],
+['ArgsNode', 4, 4, 65, 69],
+['ListNode', 4, 4, 65, 69],
+['ArgumentNode', 4, 4, 65, 69],
+nil, #['NewlineNode', 5, 6, 74, 81],
+['ReturnNode', 5, 5, 74, 80]
+]
+test_tree(list, <<END, "class methods")
+class Test
+  def Test.test huhu
+    return
+  end
+  def self.test huhu
+    return
+  end
+end
+END
+
+list = [
+nil,
+nil, #['NewlineNode', 0, 4, 0, 67],
+['DefnNode', 0, 4, 0, 67],
+['ArgumentNode', 0, 0, 4, 20],
+['ArgsNode', 1, 1, 21, 21],
+['RescueNode', 1, 4, 23, 67],
+['RescueBodyNode', 2, 4, 33, 67],
+nil, #['NewlineNode', 3, 4, 42, 64],
+['FCallNode', 3, 3, 42, 63],
+['ArrayNode', 3, 3, 47, 63],
+['StrNode', 3, 3, 47, 63],
+nil, #['NewlineNode', 1, 2, 23, 33],
+['LocalAsgnNode', 1, 1, 23, 32],
+['FixnumNode', 1, 1, 31, 32]
+]
+test_tree(list, <<END)
+def value_assertions
+  value = 5
+rescue
+  puts "to the rescue!"
+end
+END
+
+list = [
+nil,
+nil, #['NewlineNode', 0, 6, 0, 63],
+['ClassNode', 0, 6, 0, 63],
+['Colon2Node', 0, 0, 6, 7],
+nil, #['NewlineNode', 1, 6, 11, 60],
+['DefnNode', 1, 5, 11, 58],
+['ArgumentNode', 1, 1, 15, 16],
+['ArgsNode', 2, 2, 18, 18],
+['BlockNode', 2, 5, 22, 53],
+nil, #['NewlineNode', 2, 3, 22, 31],
+['YieldNode', 2, 2, 22, 30],
+['FixnumNode', 2, 2, 28, 29],
+nil, #['NewlineNode', 2, 4, 22, 43],
+['YieldNode', 3, 3, 35, 42],
+nil, #['NewlineNode', 2, 5, 22, 53],
+['YieldNode', 4, 4, 47, 52]
+]
+test_tree(list, <<END, "yield")
+class X 
+  def x 
+    yield(5)
+    yield()
+    yield
+  end 
+end
+END
+
+
+list = [
+nil,
+nil, #['NewlineNode', 0, 1, 0, 25],
+['IterNode', 0, 0, 8, 24],
+nil, #['NewlineNode', 0, 0, 10, 24],
+['FCallNode', 0, 0, 10, 22],
+['ArrayNode', 0, 0, 15, 22],
+['StrNode', 0, 0, 15, 22],
+['CallNode', 0, 0, 0, 24],
+['FixnumNode', 0, 0, 0, 1]
+]
+test_tree(list, <<END)
+5.times { puts "hello" }
+END
+
+
+list = [
+nil,
+nil, #['NewlineNode', 0, 4, 0, 44],
+['ClassNode', 0, 4, 0, 44],
+['Colon2Node', 0, 0, 6, 7],
+nil, #['NewlineNode', 1, 4, 10, 41],
+['DefnNode', 1, 3, 10, 40],
+['ArgumentNode', 1, 1, 14, 24],
+['ArgsNode', 2, 2, 25, 25],
+nil, #['NewlineNode', 2, 3, 29, 35],
+['ZSuperNode', 2, 2, 29, 34]
+]
+test_tree(list, <<END, "zsuper")
+class X
+  def initialize
+    super
+  end
+end
+END
+
+
+list = [
+nil,
+nil, #['NewlineNode', 0, 2, 0, 35],
+['DefnNode', 0, 1, 0, 34],
+['ArgumentNode', 0, 0, 4, 8],
+['ArgsNode', 0, 0, 9, 30],
+['ListNode', 0, 0, 9, 16],
+['ArgumentNode', 0, 0, 9, 10],
+['ArgumentNode', 0, 0, 12, 13],
+['ArgumentNode', 0, 0, 15, 16],
+['BlockArgNode', 0, 0, 24, 30],
+nil, #['ScopeNode', 1, 1, 33, 34]
+]
+test_tree(list, <<END, "method with opt and block arg")
+def test a, b, c, *opt, &block
+end
+END
Index: src/org/jruby/lexer/yacc/RubyYaccLexer.java
===================================================================
--- src/org/jruby/lexer/yacc/RubyYaccLexer.java	(revision 2701)
+++ src/org/jruby/lexer/yacc/RubyYaccLexer.java	(working copy)
@@ -160,7 +160,7 @@
     	return src.getPosition(startPosition, inclusive); 
     }
     
-    protected ISourcePosition getPosition() {
+    public ISourcePosition getPosition() {
         return src.getPosition(null, false);
     }
 
Index: src/org/jruby/lexer/yacc/SourcePosition.java
===================================================================
--- src/org/jruby/lexer/yacc/SourcePosition.java	(revision 2701)
+++ src/org/jruby/lexer/yacc/SourcePosition.java	(working copy)
@@ -157,6 +157,7 @@
      */
     public void adjustStartOffset(int relativeValue) {
         startOffset += relativeValue;
+        if(startOffset < 0) startOffset = 0;
     }
     
     /**
Index: src/org/jruby/parser/DefaultRubyParser.java
===================================================================
--- src/org/jruby/parser/DefaultRubyParser.java	(revision 2701)
+++ src/org/jruby/parser/DefaultRubyParser.java	(working copy)
@@ -1,4 +1,4 @@
-// created by jay 1.0.2 (c) 2002-2004 ats@cs.rit.edu
+// created by jay 1.0 (c) 2002 ats@cs.rit.edu
 // skeleton Java 1.0 (c) 2002 ats@cs.rit.edu
 
 					// line 2 "DefaultRubyParser.y"
@@ -270,7 +270,7 @@
 
   /** number of final state.
     */
-  protected static final int yyFinal = 1;
+  protected static final int yyFinal =  1;
 
   /** parser tables.
       Order is mandated by <i>jay</i>.
@@ -995,7 +995,7 @@
 case 10:
 					// line 307 "DefaultRubyParser.y"
   {
-                  yyVal = new AliasNode(getPosition(((Token)yyVals[-3+yyTop])), (String) ((Token)yyVals[-2+yyTop]).getValue(), (String) ((Token)yyVals[0+yyTop]).getValue());
+                  yyVal = new AliasNode(support.union(((Token)yyVals[-3+yyTop]), ((Token)yyVals[0+yyTop])), (String) ((Token)yyVals[-2+yyTop]).getValue(), (String) ((Token)yyVals[0+yyTop]).getValue());
               }
   break;
 case 11:
@@ -1178,89 +1178,90 @@
   {
                   ((AssignableNode)yyVals[-2+yyTop]).setValueNode(((Node)yyVals[0+yyTop]));
 		  yyVal = ((MultipleAsgnNode)yyVals[-2+yyTop]);
+                  ((MultipleAsgnNode)yyVals[-2+yyTop]).setPosition(support.union(((MultipleAsgnNode)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop])));
 	      }
   break;
 case 36:
-					// line 425 "DefaultRubyParser.y"
+					// line 426 "DefaultRubyParser.y"
   {
                   yyVal = support.newAndNode(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 37:
-					// line 428 "DefaultRubyParser.y"
+					// line 429 "DefaultRubyParser.y"
   {
                   yyVal = support.newOrNode(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 38:
-					// line 431 "DefaultRubyParser.y"
+					// line 432 "DefaultRubyParser.y"
   {
                   yyVal = new NotNode(support.union(((Token)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop])), support.getConditionNode(((Node)yyVals[0+yyTop])));
               }
   break;
 case 39:
-					// line 434 "DefaultRubyParser.y"
+					// line 435 "DefaultRubyParser.y"
   {
                   yyVal = new NotNode(support.union(((Token)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop])), support.getConditionNode(((Node)yyVals[0+yyTop])));
               }
   break;
 case 41:
-					// line 439 "DefaultRubyParser.y"
+					// line 440 "DefaultRubyParser.y"
   {
                   support.checkExpression(((Node)yyVals[0+yyTop]));
 	      }
   break;
 case 44:
-					// line 445 "DefaultRubyParser.y"
+					// line 446 "DefaultRubyParser.y"
   {
                   yyVal = new ReturnNode(support.union(((Token)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop])), support.ret_args(((Node)yyVals[0+yyTop]), getPosition(((Token)yyVals[-1+yyTop]))));
               }
   break;
 case 45:
-					// line 448 "DefaultRubyParser.y"
+					// line 449 "DefaultRubyParser.y"
   {
                   yyVal = new BreakNode(support.union(((Token)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop])), support.ret_args(((Node)yyVals[0+yyTop]), getPosition(((Token)yyVals[-1+yyTop]))));
               }
   break;
 case 46:
-					// line 451 "DefaultRubyParser.y"
+					// line 452 "DefaultRubyParser.y"
   {
                   yyVal = new NextNode(support.union(((Token)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop])), support.ret_args(((Node)yyVals[0+yyTop]), getPosition(((Token)yyVals[-1+yyTop]))));
               }
   break;
 case 48:
-					// line 456 "DefaultRubyParser.y"
+					// line 457 "DefaultRubyParser.y"
   {
                   yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((Token)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 49:
-					// line 459 "DefaultRubyParser.y"
+					// line 460 "DefaultRubyParser.y"
   {
                   yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((Token)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 50:
-					// line 463 "DefaultRubyParser.y"
+					// line 464 "DefaultRubyParser.y"
   {
                     support.pushBlockScope();
 		}
   break;
 case 51:
-					// line 465 "DefaultRubyParser.y"
+					// line 466 "DefaultRubyParser.y"
   {
                     yyVal = new IterNode(getPosition(((Token)yyVals[-4+yyTop])), ((Node)yyVals[-2+yyTop]), support.getCurrentScope(), ((Node)yyVals[-1+yyTop]), null);
                     support.popCurrentScope();
 		}
   break;
 case 52:
-					// line 470 "DefaultRubyParser.y"
+					// line 471 "DefaultRubyParser.y"
   {
                   yyVal = support.new_fcall(((Token)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 53:
-					// line 473 "DefaultRubyParser.y"
+					// line 474 "DefaultRubyParser.y"
   {
                   yyVal = support.new_fcall(((Token)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop])); 
 	          if (((IterNode)yyVals[0+yyTop]) != null) {
@@ -1273,13 +1274,13 @@
               }
   break;
 case 54:
-					// line 483 "DefaultRubyParser.y"
+					// line 484 "DefaultRubyParser.y"
   {
                   yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((Token)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop])); /*.setPosFrom($1);*/
               }
   break;
 case 55:
-					// line 486 "DefaultRubyParser.y"
+					// line 487 "DefaultRubyParser.y"
   {
                   yyVal = support.new_call(((Node)yyVals[-4+yyTop]), ((Token)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop])); 
 		  if (((IterNode)yyVals[0+yyTop]) != null) {
@@ -1292,13 +1293,13 @@
 	      }
   break;
 case 56:
-					// line 496 "DefaultRubyParser.y"
+					// line 497 "DefaultRubyParser.y"
   {
                   yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((Token)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 57:
-					// line 499 "DefaultRubyParser.y"
+					// line 500 "DefaultRubyParser.y"
   {
                   yyVal = support.new_call(((Node)yyVals[-4+yyTop]), ((Token)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop])); 
 		  if (((IterNode)yyVals[0+yyTop]) != null) {
@@ -1311,115 +1312,117 @@
 	      }
   break;
 case 58:
-					// line 509 "DefaultRubyParser.y"
+					// line 510 "DefaultRubyParser.y"
   {
 		  yyVal = support.new_super(((Node)yyVals[0+yyTop]), ((Token)yyVals[-1+yyTop])); /* .setPosFrom($2);*/
 	      }
   break;
 case 59:
-					// line 512 "DefaultRubyParser.y"
+					// line 513 "DefaultRubyParser.y"
   {
                   yyVal = support.new_yield(getPosition(((Token)yyVals[-1+yyTop])), ((Node)yyVals[0+yyTop]));
 	      }
   break;
 case 61:
-					// line 517 "DefaultRubyParser.y"
+					// line 518 "DefaultRubyParser.y"
   {
                   yyVal = ((MultipleAsgnNode)yyVals[-1+yyTop]);
 	      }
   break;
 case 63:
-					// line 522 "DefaultRubyParser.y"
+					// line 523 "DefaultRubyParser.y"
   {
                   yyVal = new MultipleAsgnNode(getPosition(((Token)yyVals[-2+yyTop])), new ArrayNode(getPosition(((Token)yyVals[-2+yyTop])), ((MultipleAsgnNode)yyVals[-1+yyTop])), null);
               }
   break;
 case 64:
-					// line 526 "DefaultRubyParser.y"
+					// line 527 "DefaultRubyParser.y"
   {
                   yyVal = new MultipleAsgnNode(getPosition(((ListNode)yyVals[0+yyTop])), ((ListNode)yyVals[0+yyTop]), null);
               }
   break;
 case 65:
-					// line 529 "DefaultRubyParser.y"
+					// line 530 "DefaultRubyParser.y"
   {
-                  yyVal = new MultipleAsgnNode(getPosition(((ListNode)yyVals[-1+yyTop])), ((ListNode)yyVals[-1+yyTop]).add(((Node)yyVals[0+yyTop])), null);
+/*mirko: check*/
+                  yyVal = new MultipleAsgnNode(support.union(((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop])), ((ListNode)yyVals[-1+yyTop]).add(((Node)yyVals[0+yyTop])), null);
+                  ((Node)yyVals[-1+yyTop]).setPosition(support.union(((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop])));
               }
   break;
 case 66:
-					// line 532 "DefaultRubyParser.y"
+					// line 535 "DefaultRubyParser.y"
   {
                   yyVal = new MultipleAsgnNode(getPosition(((ListNode)yyVals[-2+yyTop])), ((ListNode)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 67:
-					// line 535 "DefaultRubyParser.y"
+					// line 538 "DefaultRubyParser.y"
   {
                   yyVal = new MultipleAsgnNode(getPosition(((ListNode)yyVals[-1+yyTop])), ((ListNode)yyVals[-1+yyTop]), new StarNode(getPosition(null)));
               }
   break;
 case 68:
-					// line 538 "DefaultRubyParser.y"
+					// line 541 "DefaultRubyParser.y"
   {
                   yyVal = new MultipleAsgnNode(getPosition(((Token)yyVals[-1+yyTop])), null, ((Node)yyVals[0+yyTop]));
               }
   break;
 case 69:
-					// line 541 "DefaultRubyParser.y"
+					// line 544 "DefaultRubyParser.y"
   {
                   yyVal = new MultipleAsgnNode(getPosition(((Token)yyVals[0+yyTop])), null, new StarNode(getPosition(null)));
               }
   break;
 case 71:
-					// line 546 "DefaultRubyParser.y"
+					// line 549 "DefaultRubyParser.y"
   {
                   yyVal = ((MultipleAsgnNode)yyVals[-1+yyTop]);
               }
   break;
 case 72:
-					// line 550 "DefaultRubyParser.y"
+					// line 553 "DefaultRubyParser.y"
   {
                   yyVal = new ArrayNode(((Node)yyVals[-1+yyTop]).getPosition(), ((Node)yyVals[-1+yyTop]));
               }
   break;
 case 73:
-					// line 553 "DefaultRubyParser.y"
+					// line 556 "DefaultRubyParser.y"
   {
                   yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[-1+yyTop]));
               }
   break;
 case 74:
-					// line 557 "DefaultRubyParser.y"
+					// line 560 "DefaultRubyParser.y"
   {
                   yyVal = support.assignable(((Token)yyVals[0+yyTop]), null);
               }
   break;
 case 75:
-					// line 560 "DefaultRubyParser.y"
+					// line 563 "DefaultRubyParser.y"
   {
                   yyVal = support.aryset(((Node)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]));
               }
   break;
 case 76:
-					// line 563 "DefaultRubyParser.y"
+					// line 566 "DefaultRubyParser.y"
   {
                   yyVal = support.attrset(((Node)yyVals[-2+yyTop]), (String) ((Token)yyVals[0+yyTop]).getValue());
               }
   break;
 case 77:
-					// line 566 "DefaultRubyParser.y"
+					// line 569 "DefaultRubyParser.y"
   {
                   yyVal = support.attrset(((Node)yyVals[-2+yyTop]), (String) ((Token)yyVals[0+yyTop]).getValue());
               }
   break;
 case 78:
-					// line 569 "DefaultRubyParser.y"
+					// line 572 "DefaultRubyParser.y"
   {
                   yyVal = support.attrset(((Node)yyVals[-2+yyTop]), (String) ((Token)yyVals[0+yyTop]).getValue());
               }
   break;
 case 79:
-					// line 572 "DefaultRubyParser.y"
+					// line 575 "DefaultRubyParser.y"
   {
                   if (support.isInDef() || support.isInSingle()) {
 		      yyerror("dynamic constant assignment");
@@ -1429,7 +1432,7 @@
 	      }
   break;
 case 80:
-					// line 579 "DefaultRubyParser.y"
+					// line 582 "DefaultRubyParser.y"
   {
                   if (support.isInDef() || support.isInSingle()) {
 		      yyerror("dynamic constant assignment");
@@ -1441,43 +1444,43 @@
 	      }
   break;
 case 81:
-					// line 588 "DefaultRubyParser.y"
+					// line 591 "DefaultRubyParser.y"
   {
 	          support.backrefAssignError(((Node)yyVals[0+yyTop]));
               }
   break;
 case 82:
-					// line 592 "DefaultRubyParser.y"
+					// line 595 "DefaultRubyParser.y"
   {
                   yyVal = support.assignable(((Token)yyVals[0+yyTop]), null);
               }
   break;
 case 83:
-					// line 595 "DefaultRubyParser.y"
+					// line 598 "DefaultRubyParser.y"
   {
                   yyVal = support.aryset(((Node)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]));
               }
   break;
 case 84:
-					// line 598 "DefaultRubyParser.y"
+					// line 601 "DefaultRubyParser.y"
   {
                   yyVal = support.attrset(((Node)yyVals[-2+yyTop]), (String) ((Token)yyVals[0+yyTop]).getValue());
               }
   break;
 case 85:
-					// line 601 "DefaultRubyParser.y"
+					// line 604 "DefaultRubyParser.y"
   {
                   yyVal = support.attrset(((Node)yyVals[-2+yyTop]), (String) ((Token)yyVals[0+yyTop]).getValue());
  	      }
   break;
 case 86:
-					// line 604 "DefaultRubyParser.y"
+					// line 607 "DefaultRubyParser.y"
   {
                   yyVal = support.attrset(((Node)yyVals[-2+yyTop]), (String) ((Token)yyVals[0+yyTop]).getValue());
               }
   break;
 case 87:
-					// line 607 "DefaultRubyParser.y"
+					// line 610 "DefaultRubyParser.y"
   {
                   if (support.isInDef() || support.isInSingle()) {
 		      yyerror("dynamic constant assignment");
@@ -1487,7 +1490,7 @@
 	      }
   break;
 case 88:
-					// line 614 "DefaultRubyParser.y"
+					// line 617 "DefaultRubyParser.y"
   {
                   if (support.isInDef() || support.isInSingle()) {
 		      yyerror("dynamic constant assignment");
@@ -1499,69 +1502,69 @@
 	      }
   break;
 case 89:
-					// line 623 "DefaultRubyParser.y"
+					// line 626 "DefaultRubyParser.y"
   {
                    support.backrefAssignError(((Node)yyVals[0+yyTop]));
 	      }
   break;
 case 90:
-					// line 627 "DefaultRubyParser.y"
+					// line 630 "DefaultRubyParser.y"
   {
                   yyerror("class/module name must be CONSTANT");
               }
   break;
 case 92:
-					// line 632 "DefaultRubyParser.y"
+					// line 635 "DefaultRubyParser.y"
   {
                   yyVal = new Colon3Node(support.union(((Token)yyVals[-1+yyTop]), ((Token)yyVals[0+yyTop])), (String) ((Token)yyVals[0+yyTop]).getValue());
 	      }
   break;
 case 93:
-					// line 635 "DefaultRubyParser.y"
+					// line 638 "DefaultRubyParser.y"
   {
                   yyVal = new Colon2Node(((Token)yyVals[0+yyTop]).getPosition(), null, (String) ((Token)yyVals[0+yyTop]).getValue());
  	      }
   break;
 case 94:
-					// line 638 "DefaultRubyParser.y"
+					// line 641 "DefaultRubyParser.y"
   {
                   yyVal = new Colon2Node(support.union(((Node)yyVals[-2+yyTop]), ((Token)yyVals[0+yyTop])), ((Node)yyVals[-2+yyTop]), (String) ((Token)yyVals[0+yyTop]).getValue());
 	      }
   break;
 case 98:
-					// line 644 "DefaultRubyParser.y"
+					// line 647 "DefaultRubyParser.y"
   {
                   lexer.setState(LexState.EXPR_END);
                   yyVal = ((Token)yyVals[0+yyTop]);
               }
   break;
 case 99:
-					// line 649 "DefaultRubyParser.y"
+					// line 652 "DefaultRubyParser.y"
   {
                   lexer.setState(LexState.EXPR_END);
                   yyVal = yyVals[0+yyTop];
               }
   break;
 case 102:
-					// line 656 "DefaultRubyParser.y"
+					// line 659 "DefaultRubyParser.y"
   {
                   yyVal = new UndefNode(getPosition(((Token)yyVals[0+yyTop])), (String) ((Token)yyVals[0+yyTop]).getValue());
               }
   break;
 case 103:
-					// line 659 "DefaultRubyParser.y"
+					// line 662 "DefaultRubyParser.y"
   {
                   lexer.setState(LexState.EXPR_FNAME);
 	      }
   break;
 case 104:
-					// line 661 "DefaultRubyParser.y"
+					// line 664 "DefaultRubyParser.y"
   {
                   yyVal = support.appendToBlock(((Node)yyVals[-3+yyTop]), new UndefNode(getPosition(((Node)yyVals[-3+yyTop])), (String) ((Token)yyVals[0+yyTop]).getValue()));
               }
   break;
 case 172:
-					// line 680 "DefaultRubyParser.y"
+					// line 683 "DefaultRubyParser.y"
   {
                   yyVal = support.node_assign(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
 		  /* FIXME: Consider fixing node_assign itself rather than single case*/
@@ -1569,14 +1572,14 @@
               }
   break;
 case 173:
-					// line 685 "DefaultRubyParser.y"
+					// line 688 "DefaultRubyParser.y"
   {
                   ISourcePosition position = support.union(((Token)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
                   yyVal = support.node_assign(((Node)yyVals[-4+yyTop]), new RescueNode(position, ((Node)yyVals[-2+yyTop]), new RescueBodyNode(position, null, ((Node)yyVals[0+yyTop]), null), null));
 	      }
   break;
 case 174:
-					// line 689 "DefaultRubyParser.y"
+					// line 692 "DefaultRubyParser.y"
   {
 		  support.checkExpression(((Node)yyVals[0+yyTop]));
 	          String name = ((INameNode)yyVals[-2+yyTop]).getName();
@@ -1590,118 +1593,119 @@
                       yyVal = new OpAsgnAndNode(getPosition(((AssignableNode)yyVals[-2+yyTop])), support.gettable2(name, ((AssignableNode)yyVals[-2+yyTop]).getPosition()), ((AssignableNode)yyVals[-2+yyTop]));
 		  } else {
 		      ((AssignableNode)yyVals[-2+yyTop]).setValueNode(support.getOperatorCallNode(support.gettable2(name, ((AssignableNode)yyVals[-2+yyTop]).getPosition()), asgnOp, ((Node)yyVals[0+yyTop])));
+                      ((AssignableNode)yyVals[-2+yyTop]).setPosition(support.union(((AssignableNode)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop])));
 		      yyVal = ((AssignableNode)yyVals[-2+yyTop]);
 		  }
               }
   break;
 case 175:
-					// line 705 "DefaultRubyParser.y"
+					// line 709 "DefaultRubyParser.y"
   {
                   yyVal = new OpElementAsgnNode(getPosition(((Node)yyVals[-5+yyTop])), ((Node)yyVals[-5+yyTop]), (String) ((Token)yyVals[-1+yyTop]).getValue(), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 176:
-					// line 708 "DefaultRubyParser.y"
+					// line 712 "DefaultRubyParser.y"
   {
                   yyVal = new OpAsgnNode(getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop]), ((Node)yyVals[0+yyTop]), (String) ((Token)yyVals[-2+yyTop]).getValue(), (String) ((Token)yyVals[-1+yyTop]).getValue());
               }
   break;
 case 177:
-					// line 711 "DefaultRubyParser.y"
+					// line 715 "DefaultRubyParser.y"
   {
                   yyVal = new OpAsgnNode(getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop]), ((Node)yyVals[0+yyTop]), (String) ((Token)yyVals[-2+yyTop]).getValue(), (String) ((Token)yyVals[-1+yyTop]).getValue());
               }
   break;
 case 178:
-					// line 714 "DefaultRubyParser.y"
+					// line 718 "DefaultRubyParser.y"
   {
                   yyVal = new OpAsgnNode(getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop]), ((Node)yyVals[0+yyTop]), (String) ((Token)yyVals[-2+yyTop]).getValue(), (String) ((Token)yyVals[-1+yyTop]).getValue());
               }
   break;
 case 179:
-					// line 717 "DefaultRubyParser.y"
+					// line 721 "DefaultRubyParser.y"
   {
 	          yyerror("constant re-assignment");
 	      }
   break;
 case 180:
-					// line 720 "DefaultRubyParser.y"
+					// line 724 "DefaultRubyParser.y"
   {
 		  yyerror("constant re-assignment");
 	      }
   break;
 case 181:
-					// line 723 "DefaultRubyParser.y"
+					// line 727 "DefaultRubyParser.y"
   {
                   support.backrefAssignError(((Node)yyVals[-2+yyTop]));
               }
   break;
 case 182:
-					// line 726 "DefaultRubyParser.y"
+					// line 730 "DefaultRubyParser.y"
   {
 		  support.checkExpression(((Node)yyVals[-2+yyTop]));
 		  support.checkExpression(((Node)yyVals[0+yyTop]));
-                  yyVal = new DotNode(getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]), false);
+                  yyVal = new DotNode(support.union(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop])), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]), false);
               }
   break;
 case 183:
-					// line 731 "DefaultRubyParser.y"
+					// line 735 "DefaultRubyParser.y"
   {
 		  support.checkExpression(((Node)yyVals[-2+yyTop]));
 		  support.checkExpression(((Node)yyVals[0+yyTop]));
-                  yyVal = new DotNode(getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]), true);
+                  yyVal = new DotNode(support.union(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop])), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]), true);
               }
   break;
 case 184:
-					// line 736 "DefaultRubyParser.y"
+					// line 740 "DefaultRubyParser.y"
   {
                   yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "+", ((Node)yyVals[0+yyTop]));
               }
   break;
 case 185:
-					// line 739 "DefaultRubyParser.y"
+					// line 743 "DefaultRubyParser.y"
   {
                   yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "-", ((Node)yyVals[0+yyTop]));
               }
   break;
 case 186:
-					// line 742 "DefaultRubyParser.y"
+					// line 746 "DefaultRubyParser.y"
   {
                   yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "*", ((Node)yyVals[0+yyTop]));
               }
   break;
 case 187:
-					// line 745 "DefaultRubyParser.y"
+					// line 749 "DefaultRubyParser.y"
   {
                   yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "/", ((Node)yyVals[0+yyTop]));
               }
   break;
 case 188:
-					// line 748 "DefaultRubyParser.y"
+					// line 752 "DefaultRubyParser.y"
   {
                   yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "%", ((Node)yyVals[0+yyTop]));
               }
   break;
 case 189:
-					// line 751 "DefaultRubyParser.y"
+					// line 755 "DefaultRubyParser.y"
   {
 		  yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "**", ((Node)yyVals[0+yyTop]));
               }
   break;
 case 190:
-					// line 754 "DefaultRubyParser.y"
+					// line 758 "DefaultRubyParser.y"
   {
                   yyVal = support.getOperatorCallNode(support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "**", ((Node)yyVals[0+yyTop])), "-@");
               }
   break;
 case 191:
-					// line 757 "DefaultRubyParser.y"
+					// line 761 "DefaultRubyParser.y"
   {
                   yyVal = support.getOperatorCallNode(support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "**", ((Node)yyVals[0+yyTop])), "-@");
               }
   break;
 case 192:
-					// line 760 "DefaultRubyParser.y"
+					// line 764 "DefaultRubyParser.y"
   {
  	          if (((Node)yyVals[0+yyTop]) != null && ((Node)yyVals[0+yyTop]) instanceof ILiteralNode) {
 		      yyVal = ((Node)yyVals[0+yyTop]);
@@ -1711,253 +1715,253 @@
               }
   break;
 case 193:
-					// line 767 "DefaultRubyParser.y"
+					// line 771 "DefaultRubyParser.y"
   {
                   yyVal = support.getOperatorCallNode(((Node)yyVals[0+yyTop]), "-@");
 	      }
   break;
 case 194:
-					// line 770 "DefaultRubyParser.y"
+					// line 774 "DefaultRubyParser.y"
   {
                   yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "|", ((Node)yyVals[0+yyTop]));
               }
   break;
 case 195:
-					// line 773 "DefaultRubyParser.y"
+					// line 777 "DefaultRubyParser.y"
   {
                   yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "^", ((Node)yyVals[0+yyTop]));
               }
   break;
 case 196:
-					// line 776 "DefaultRubyParser.y"
+					// line 780 "DefaultRubyParser.y"
   {
                   yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "&", ((Node)yyVals[0+yyTop]));
               }
   break;
 case 197:
-					// line 779 "DefaultRubyParser.y"
+					// line 783 "DefaultRubyParser.y"
   {
                   yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "<=>", ((Node)yyVals[0+yyTop]));
               }
   break;
 case 198:
-					// line 782 "DefaultRubyParser.y"
+					// line 786 "DefaultRubyParser.y"
   {
                   yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), ">", ((Node)yyVals[0+yyTop]));
               }
   break;
 case 199:
-					// line 785 "DefaultRubyParser.y"
+					// line 789 "DefaultRubyParser.y"
   {
                   yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), ">=", ((Node)yyVals[0+yyTop]));
               }
   break;
 case 200:
-					// line 788 "DefaultRubyParser.y"
+					// line 792 "DefaultRubyParser.y"
   {
                   yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "<", ((Node)yyVals[0+yyTop]));
               }
   break;
 case 201:
-					// line 791 "DefaultRubyParser.y"
+					// line 795 "DefaultRubyParser.y"
   {
                   yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "<=", ((Node)yyVals[0+yyTop]));
               }
   break;
 case 202:
-					// line 794 "DefaultRubyParser.y"
+					// line 798 "DefaultRubyParser.y"
   {
                   yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "==", ((Node)yyVals[0+yyTop]));
               }
   break;
 case 203:
-					// line 797 "DefaultRubyParser.y"
+					// line 801 "DefaultRubyParser.y"
   {
                   yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "===", ((Node)yyVals[0+yyTop]));
               }
   break;
 case 204:
-					// line 800 "DefaultRubyParser.y"
+					// line 804 "DefaultRubyParser.y"
   {
                   yyVal = new NotNode(support.union(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop])), support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "==", ((Node)yyVals[0+yyTop])));
               }
   break;
 case 205:
-					// line 803 "DefaultRubyParser.y"
+					// line 807 "DefaultRubyParser.y"
   {
                   yyVal = support.getMatchNode(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 206:
-					// line 806 "DefaultRubyParser.y"
+					// line 810 "DefaultRubyParser.y"
   {
                   yyVal = new NotNode(support.union(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop])), support.getMatchNode(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop])));
               }
   break;
 case 207:
-					// line 809 "DefaultRubyParser.y"
+					// line 813 "DefaultRubyParser.y"
   {
                   yyVal = new NotNode(support.union(((Token)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop])), support.getConditionNode(((Node)yyVals[0+yyTop])));
               }
   break;
 case 208:
-					// line 812 "DefaultRubyParser.y"
+					// line 816 "DefaultRubyParser.y"
   {
                   yyVal = support.getOperatorCallNode(((Node)yyVals[0+yyTop]), "~");
               }
   break;
 case 209:
-					// line 815 "DefaultRubyParser.y"
+					// line 819 "DefaultRubyParser.y"
   {
                   yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), "<<", ((Node)yyVals[0+yyTop]));
               }
   break;
 case 210:
-					// line 818 "DefaultRubyParser.y"
+					// line 822 "DefaultRubyParser.y"
   {
                   yyVal = support.getOperatorCallNode(((Node)yyVals[-2+yyTop]), ">>", ((Node)yyVals[0+yyTop]));
               }
   break;
 case 211:
-					// line 821 "DefaultRubyParser.y"
+					// line 825 "DefaultRubyParser.y"
   {
                   yyVal = support.newAndNode(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 212:
-					// line 824 "DefaultRubyParser.y"
+					// line 828 "DefaultRubyParser.y"
   {
                   yyVal = support.newOrNode(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 213:
-					// line 827 "DefaultRubyParser.y"
+					// line 831 "DefaultRubyParser.y"
   {
                   yyVal = new DefinedNode(getPosition(((Token)yyVals[-2+yyTop])), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 214:
-					// line 830 "DefaultRubyParser.y"
+					// line 834 "DefaultRubyParser.y"
   {
                   yyVal = new IfNode(getPosition(((Node)yyVals[-4+yyTop])), support.getConditionNode(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 215:
-					// line 833 "DefaultRubyParser.y"
+					// line 837 "DefaultRubyParser.y"
   {
                   yyVal = ((Node)yyVals[0+yyTop]);
               }
   break;
 case 216:
-					// line 837 "DefaultRubyParser.y"
+					// line 841 "DefaultRubyParser.y"
   {
 	          support.checkExpression(((Node)yyVals[0+yyTop]));
 	          yyVal = ((Node)yyVals[0+yyTop]);   
 	      }
   break;
 case 218:
-					// line 843 "DefaultRubyParser.y"
+					// line 847 "DefaultRubyParser.y"
   {
                   warnings.warn(getPosition(((Node)yyVals[-1+yyTop])), "parenthesize argument(s) for future version");
                   yyVal = new ArrayNode(getPosition(((Node)yyVals[-1+yyTop])), ((Node)yyVals[-1+yyTop]));
               }
   break;
 case 219:
-					// line 847 "DefaultRubyParser.y"
+					// line 851 "DefaultRubyParser.y"
   {
                   yyVal = ((ListNode)yyVals[-1+yyTop]);
               }
   break;
 case 220:
-					// line 850 "DefaultRubyParser.y"
+					// line 854 "DefaultRubyParser.y"
   {
                   support.checkExpression(((Node)yyVals[-1+yyTop]));
                   yyVal = support.arg_concat(getPosition(((ListNode)yyVals[-4+yyTop])), ((ListNode)yyVals[-4+yyTop]), ((Node)yyVals[-1+yyTop]));
               }
   break;
 case 221:
-					// line 854 "DefaultRubyParser.y"
+					// line 858 "DefaultRubyParser.y"
   {
                   yyVal = new ArrayNode(getPosition(((ListNode)yyVals[-1+yyTop])), new HashNode(getPosition(null), ((ListNode)yyVals[-1+yyTop])));
               }
   break;
 case 222:
-					// line 857 "DefaultRubyParser.y"
+					// line 861 "DefaultRubyParser.y"
   {
                   support.checkExpression(((Node)yyVals[-1+yyTop]));
 		  yyVal = new NewlineNode(getPosition(((Token)yyVals[-2+yyTop])), new SplatNode(getPosition(((Token)yyVals[-2+yyTop])), ((Node)yyVals[-1+yyTop])));
               }
   break;
 case 223:
-					// line 862 "DefaultRubyParser.y"
+					// line 866 "DefaultRubyParser.y"
   {
                   yyVal = new ArrayNode(support.union(((Token)yyVals[-2+yyTop]), ((Token)yyVals[0+yyTop])));
               }
   break;
 case 224:
-					// line 865 "DefaultRubyParser.y"
+					// line 869 "DefaultRubyParser.y"
   {
                   yyVal = ((Node)yyVals[-2+yyTop]);
 		  ((Node)yyVal).setPosition(support.union(((Token)yyVals[-3+yyTop]), ((Token)yyVals[0+yyTop])));
               }
   break;
 case 225:
-					// line 869 "DefaultRubyParser.y"
+					// line 873 "DefaultRubyParser.y"
   {
                   warnings.warn(getPosition(((Token)yyVals[-3+yyTop])), "parenthesize argument(s) for future version");
                   yyVal = new ArrayNode(getPosition(((Token)yyVals[-3+yyTop])), ((Node)yyVals[-2+yyTop]));
               }
   break;
 case 226:
-					// line 873 "DefaultRubyParser.y"
+					// line 877 "DefaultRubyParser.y"
   {
                   warnings.warn(getPosition(((Token)yyVals[-5+yyTop])), "parenthesize argument(s) for future version");
                   yyVal = ((ListNode)yyVals[-4+yyTop]).add(((Node)yyVals[-2+yyTop]));
               }
   break;
 case 229:
-					// line 881 "DefaultRubyParser.y"
+					// line 885 "DefaultRubyParser.y"
   {
                   warnings.warn(getPosition(((Node)yyVals[0+yyTop])), "parenthesize argument(s) for future version");
                   yyVal = new ArrayNode(getPosition(((Node)yyVals[0+yyTop])), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 230:
-					// line 885 "DefaultRubyParser.y"
+					// line 889 "DefaultRubyParser.y"
   {
                   yyVal = support.arg_blk_pass(((ListNode)yyVals[-1+yyTop]), ((BlockPassNode)yyVals[0+yyTop]));
               }
   break;
 case 231:
-					// line 888 "DefaultRubyParser.y"
+					// line 892 "DefaultRubyParser.y"
   {
                   yyVal = support.arg_concat(getPosition(((ListNode)yyVals[-4+yyTop])), ((ListNode)yyVals[-4+yyTop]), ((Node)yyVals[-1+yyTop]));
                   yyVal = support.arg_blk_pass(((Node)yyVal), ((BlockPassNode)yyVals[0+yyTop]));
               }
   break;
 case 232:
-					// line 892 "DefaultRubyParser.y"
+					// line 896 "DefaultRubyParser.y"
   {
                   yyVal = new ArrayNode(getPosition(((ListNode)yyVals[-1+yyTop])), new HashNode(getPosition(null), ((ListNode)yyVals[-1+yyTop])));
                   yyVal = support.arg_blk_pass((Node)yyVal, ((BlockPassNode)yyVals[0+yyTop]));
               }
   break;
 case 233:
-					// line 896 "DefaultRubyParser.y"
+					// line 900 "DefaultRubyParser.y"
   {
                   yyVal = support.arg_concat(getPosition(((ListNode)yyVals[-4+yyTop])), new ArrayNode(getPosition(((ListNode)yyVals[-4+yyTop])), new HashNode(getPosition(null), ((ListNode)yyVals[-4+yyTop]))), ((Node)yyVals[-1+yyTop]));
                   yyVal = support.arg_blk_pass((Node)yyVal, ((BlockPassNode)yyVals[0+yyTop]));
               }
   break;
 case 234:
-					// line 900 "DefaultRubyParser.y"
+					// line 904 "DefaultRubyParser.y"
   {
                   yyVal = ((ListNode)yyVals[-3+yyTop]).add(new HashNode(getPosition(null), ((ListNode)yyVals[-1+yyTop])));
                   yyVal = support.arg_blk_pass((Node)yyVal, ((BlockPassNode)yyVals[0+yyTop]));
               }
   break;
 case 235:
-					// line 904 "DefaultRubyParser.y"
+					// line 908 "DefaultRubyParser.y"
   {
                   support.checkExpression(((Node)yyVals[-1+yyTop]));
 		  yyVal = support.arg_concat(getPosition(((ListNode)yyVals[-6+yyTop])), ((ListNode)yyVals[-6+yyTop]).add(new HashNode(getPosition(null), ((ListNode)yyVals[-4+yyTop]))), ((Node)yyVals[-1+yyTop]));
@@ -1965,226 +1969,226 @@
               }
   break;
 case 236:
-					// line 909 "DefaultRubyParser.y"
+					// line 913 "DefaultRubyParser.y"
   {
                   yyVal = support.arg_blk_pass(new SplatNode(getPosition(((Token)yyVals[-2+yyTop])), ((Node)yyVals[-1+yyTop])), ((BlockPassNode)yyVals[0+yyTop]));
               }
   break;
 case 237:
-					// line 912 "DefaultRubyParser.y"
+					// line 916 "DefaultRubyParser.y"
   {}
   break;
 case 238:
-					// line 914 "DefaultRubyParser.y"
+					// line 918 "DefaultRubyParser.y"
   {
                   yyVal = support.arg_blk_pass(new ArrayNode(getPosition(((Node)yyVals[-3+yyTop])), ((Node)yyVals[-3+yyTop])).addAll(((ListNode)yyVals[-1+yyTop])), ((BlockPassNode)yyVals[0+yyTop]));
 	      }
   break;
 case 239:
-					// line 917 "DefaultRubyParser.y"
+					// line 921 "DefaultRubyParser.y"
   {
                   yyVal = support.arg_blk_pass(new ArrayNode(getPosition(((Node)yyVals[-2+yyTop])), ((Node)yyVals[-2+yyTop])), ((BlockPassNode)yyVals[0+yyTop]));
               }
   break;
 case 240:
-					// line 920 "DefaultRubyParser.y"
+					// line 924 "DefaultRubyParser.y"
   {
                   yyVal = support.arg_concat(getPosition(((Node)yyVals[-4+yyTop])), new ArrayNode(getPosition(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-4+yyTop])), ((Node)yyVals[-1+yyTop]));
                   yyVal = support.arg_blk_pass((Node)yyVal, ((BlockPassNode)yyVals[0+yyTop]));
 	      }
   break;
 case 241:
-					// line 924 "DefaultRubyParser.y"
+					// line 928 "DefaultRubyParser.y"
   {
                   yyVal = support.arg_concat(getPosition(((Node)yyVals[-6+yyTop])), new ArrayNode(getPosition(((Node)yyVals[-6+yyTop])), ((Node)yyVals[-6+yyTop])).addAll(new HashNode(getPosition(null), ((ListNode)yyVals[-4+yyTop]))), ((Node)yyVals[-1+yyTop]));
                   yyVal = support.arg_blk_pass((Node)yyVal, ((BlockPassNode)yyVals[0+yyTop]));
 	      }
   break;
 case 242:
-					// line 928 "DefaultRubyParser.y"
+					// line 932 "DefaultRubyParser.y"
   {
                   yyVal = new ArrayNode(getPosition(((ListNode)yyVals[-1+yyTop])), new HashNode(getPosition(null), ((ListNode)yyVals[-1+yyTop])));
                   yyVal = support.arg_blk_pass((Node)yyVal, ((BlockPassNode)yyVals[0+yyTop]));
 	      }
   break;
 case 243:
-					// line 932 "DefaultRubyParser.y"
+					// line 936 "DefaultRubyParser.y"
   {
                   yyVal = support.arg_concat(getPosition(((ListNode)yyVals[-4+yyTop])), new ArrayNode(getPosition(((ListNode)yyVals[-4+yyTop])), new HashNode(getPosition(null), ((ListNode)yyVals[-4+yyTop]))), ((Node)yyVals[-1+yyTop]));
                   yyVal = support.arg_blk_pass((Node)yyVal, ((BlockPassNode)yyVals[0+yyTop]));
 	      }
   break;
 case 244:
-					// line 936 "DefaultRubyParser.y"
+					// line 940 "DefaultRubyParser.y"
   {
                   yyVal = new ArrayNode(getPosition(((Node)yyVals[-3+yyTop])), ((Node)yyVals[-3+yyTop])).add(new HashNode(getPosition(null), ((ListNode)yyVals[-1+yyTop])));
                   yyVal = support.arg_blk_pass((Node)yyVal, ((BlockPassNode)yyVals[0+yyTop]));
 	      }
   break;
 case 245:
-					// line 940 "DefaultRubyParser.y"
+					// line 944 "DefaultRubyParser.y"
   {
                   yyVal = new ArrayNode(getPosition(((Node)yyVals[-5+yyTop])), ((Node)yyVals[-5+yyTop])).addAll(((ListNode)yyVals[-3+yyTop])).add(new HashNode(getPosition(null), ((ListNode)yyVals[-1+yyTop])));
                   yyVal = support.arg_blk_pass((Node)yyVal, ((BlockPassNode)yyVals[0+yyTop]));
 	      }
   break;
 case 246:
-					// line 944 "DefaultRubyParser.y"
+					// line 948 "DefaultRubyParser.y"
   {
                   yyVal = support.arg_concat(getPosition(((Node)yyVals[-6+yyTop])), new ArrayNode(getPosition(((Node)yyVals[-6+yyTop])), ((Node)yyVals[-6+yyTop])).add(new HashNode(getPosition(null), ((ListNode)yyVals[-4+yyTop]))), ((Node)yyVals[-1+yyTop]));
                   yyVal = support.arg_blk_pass((Node)yyVal, ((BlockPassNode)yyVals[0+yyTop]));
 	      }
   break;
 case 247:
-					// line 948 "DefaultRubyParser.y"
+					// line 952 "DefaultRubyParser.y"
   {
                   yyVal = support.arg_concat(getPosition(((Node)yyVals[-8+yyTop])), new ArrayNode(getPosition(((Node)yyVals[-8+yyTop])), ((Node)yyVals[-8+yyTop])).addAll(((ListNode)yyVals[-6+yyTop])).add(new HashNode(getPosition(null), ((ListNode)yyVals[-4+yyTop]))), ((Node)yyVals[-1+yyTop]));
                   yyVal = support.arg_blk_pass((Node)yyVal, ((BlockPassNode)yyVals[0+yyTop]));
 	      }
   break;
 case 248:
-					// line 952 "DefaultRubyParser.y"
+					// line 956 "DefaultRubyParser.y"
   {
                   yyVal = support.arg_blk_pass(new SplatNode(getPosition(((Token)yyVals[-2+yyTop])), ((Node)yyVals[-1+yyTop])), ((BlockPassNode)yyVals[0+yyTop]));
 	      }
   break;
 case 249:
-					// line 955 "DefaultRubyParser.y"
+					// line 959 "DefaultRubyParser.y"
   {}
   break;
 case 250:
-					// line 957 "DefaultRubyParser.y"
+					// line 961 "DefaultRubyParser.y"
   { 
 	          yyVal = new Long(lexer.getCmdArgumentState().begin());
 	      }
   break;
 case 251:
-					// line 959 "DefaultRubyParser.y"
+					// line 963 "DefaultRubyParser.y"
   {
                   lexer.getCmdArgumentState().reset(((Long)yyVals[-1+yyTop]).longValue());
                   yyVal = ((Node)yyVals[0+yyTop]);
               }
   break;
 case 253:
-					// line 965 "DefaultRubyParser.y"
+					// line 969 "DefaultRubyParser.y"
   {                    
 		  lexer.setState(LexState.EXPR_ENDARG);
 	      }
   break;
 case 254:
-					// line 967 "DefaultRubyParser.y"
+					// line 971 "DefaultRubyParser.y"
   {
                   warnings.warn(getPosition(((Token)yyVals[-2+yyTop])), "don't put space before argument parentheses");
 	          yyVal = null;
 	      }
   break;
 case 255:
-					// line 971 "DefaultRubyParser.y"
+					// line 975 "DefaultRubyParser.y"
   {
 		  lexer.setState(LexState.EXPR_ENDARG);
 	      }
   break;
 case 256:
-					// line 973 "DefaultRubyParser.y"
+					// line 977 "DefaultRubyParser.y"
   {
                   warnings.warn(getPosition(((Token)yyVals[-3+yyTop])), "don't put space before argument parentheses");
 		  yyVal = ((Node)yyVals[-2+yyTop]);
 	      }
   break;
 case 257:
-					// line 978 "DefaultRubyParser.y"
+					// line 982 "DefaultRubyParser.y"
   {
                   support.checkExpression(((Node)yyVals[0+yyTop]));
                   yyVal = new BlockPassNode(getPosition(((Token)yyVals[-1+yyTop])), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 258:
-					// line 983 "DefaultRubyParser.y"
+					// line 987 "DefaultRubyParser.y"
   {
                   yyVal = ((BlockPassNode)yyVals[0+yyTop]);
               }
   break;
 case 260:
-					// line 988 "DefaultRubyParser.y"
+					// line 992 "DefaultRubyParser.y"
   {
                   yyVal = new ArrayNode(getPosition2(((Node)yyVals[0+yyTop])), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 261:
-					// line 991 "DefaultRubyParser.y"
+					// line 995 "DefaultRubyParser.y"
   {
                   yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[0+yyTop]));
               }
   break;
 case 262:
-					// line 995 "DefaultRubyParser.y"
+					// line 999 "DefaultRubyParser.y"
   {
 		  yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[0+yyTop]));
               }
   break;
 case 263:
-					// line 998 "DefaultRubyParser.y"
+					// line 1002 "DefaultRubyParser.y"
   {
                   yyVal = support.arg_concat(getPosition(((ListNode)yyVals[-3+yyTop])), ((ListNode)yyVals[-3+yyTop]), ((Node)yyVals[0+yyTop]));
 	      }
   break;
 case 264:
-					// line 1001 "DefaultRubyParser.y"
+					// line 1005 "DefaultRubyParser.y"
   {  
                   yyVal = new SplatNode(getPosition(((Token)yyVals[-1+yyTop])), ((Node)yyVals[0+yyTop]));
 	      }
   break;
 case 273:
-					// line 1013 "DefaultRubyParser.y"
+					// line 1017 "DefaultRubyParser.y"
   {
                   yyVal = new VCallNode(((Token)yyVals[0+yyTop]).getPosition(), (String) ((Token)yyVals[0+yyTop]).getValue());
 	      }
   break;
 case 274:
-					// line 1016 "DefaultRubyParser.y"
+					// line 1020 "DefaultRubyParser.y"
   {
                   yyVal = new BeginNode(support.union(((Token)yyVals[-2+yyTop]), ((Token)yyVals[0+yyTop])), ((Node)yyVals[-1+yyTop]));
 	      }
   break;
 case 275:
-					// line 1019 "DefaultRubyParser.y"
+					// line 1023 "DefaultRubyParser.y"
   { 
                   lexer.setState(LexState.EXPR_ENDARG); 
               }
   break;
 case 276:
-					// line 1021 "DefaultRubyParser.y"
+					// line 1025 "DefaultRubyParser.y"
   {
 		  warnings.warning(getPosition(((Token)yyVals[-4+yyTop])), "(...) interpreted as grouped expression");
                   yyVal = ((Node)yyVals[-3+yyTop]);
 	      }
   break;
 case 277:
-					// line 1025 "DefaultRubyParser.y"
+					// line 1029 "DefaultRubyParser.y"
   {
 		  yyVal = ((Node)yyVals[-1+yyTop]);
               }
   break;
 case 278:
-					// line 1028 "DefaultRubyParser.y"
+					// line 1032 "DefaultRubyParser.y"
   {
                   yyVal = new Colon2Node(support.union(((Node)yyVals[-2+yyTop]), ((Token)yyVals[0+yyTop])), ((Node)yyVals[-2+yyTop]), (String) ((Token)yyVals[0+yyTop]).getValue());
               }
   break;
 case 279:
-					// line 1031 "DefaultRubyParser.y"
+					// line 1035 "DefaultRubyParser.y"
   {
                   yyVal = new Colon3Node(support.union(((Token)yyVals[-1+yyTop]), ((Token)yyVals[0+yyTop])), (String) ((Token)yyVals[0+yyTop]).getValue());
               }
   break;
 case 280:
-					// line 1034 "DefaultRubyParser.y"
+					// line 1038 "DefaultRubyParser.y"
   {
                   yyVal = new CallNode(getPosition(((Node)yyVals[-3+yyTop])), ((Node)yyVals[-3+yyTop]), "[]", ((Node)yyVals[-1+yyTop]));
               }
   break;
 case 281:
-					// line 1037 "DefaultRubyParser.y"
+					// line 1041 "DefaultRubyParser.y"
   {
                   ISourcePosition position = support.union(((Token)yyVals[-2+yyTop]), ((Token)yyVals[0+yyTop]));
                   if (((Node)yyVals[-1+yyTop]) == null) {
@@ -2196,50 +2200,50 @@
               }
   break;
 case 282:
-					// line 1046 "DefaultRubyParser.y"
+					// line 1050 "DefaultRubyParser.y"
   {
-                  yyVal = new HashNode(getPosition(((Token)yyVals[-2+yyTop])), ((ListNode)yyVals[-1+yyTop]));
+                  yyVal = new HashNode(support.union(((Token)yyVals[-2+yyTop]), ((Token)yyVals[0+yyTop])), ((ListNode)yyVals[-1+yyTop]));
               }
   break;
 case 283:
-					// line 1049 "DefaultRubyParser.y"
+					// line 1053 "DefaultRubyParser.y"
   {
 		  yyVal = new ReturnNode(((Token)yyVals[0+yyTop]).getPosition(), null);
               }
   break;
 case 284:
-					// line 1052 "DefaultRubyParser.y"
+					// line 1056 "DefaultRubyParser.y"
   {
                   yyVal = support.new_yield(support.union(((Token)yyVals[-3+yyTop]), ((Token)yyVals[0+yyTop])), ((Node)yyVals[-1+yyTop]));
               }
   break;
 case 285:
-					// line 1055 "DefaultRubyParser.y"
+					// line 1059 "DefaultRubyParser.y"
   {
                   yyVal = new YieldNode(support.union(((Token)yyVals[-2+yyTop]), ((Token)yyVals[0+yyTop])), null, false);
               }
   break;
 case 286:
-					// line 1058 "DefaultRubyParser.y"
+					// line 1062 "DefaultRubyParser.y"
   {
                   yyVal = new YieldNode(((Token)yyVals[0+yyTop]).getPosition(), null, false);
               }
   break;
 case 287:
-					// line 1061 "DefaultRubyParser.y"
+					// line 1065 "DefaultRubyParser.y"
   {
                   yyVal = new DefinedNode(getPosition(((Token)yyVals[-4+yyTop])), ((Node)yyVals[-1+yyTop]));
               }
   break;
 case 288:
-					// line 1064 "DefaultRubyParser.y"
+					// line 1068 "DefaultRubyParser.y"
   {
                   ((IterNode)yyVals[0+yyTop]).setIterNode(new FCallNode(support.union(((Token)yyVals[-1+yyTop]), ((IterNode)yyVals[0+yyTop])), (String) ((Token)yyVals[-1+yyTop]).getValue(), null));
                   yyVal = ((IterNode)yyVals[0+yyTop]);
               }
   break;
 case 290:
-					// line 1069 "DefaultRubyParser.y"
+					// line 1073 "DefaultRubyParser.y"
   {
 		  if (((Node)yyVals[-1+yyTop]) != null && ((Node)yyVals[-1+yyTop]) instanceof BlockPassNode) {
                       throw new SyntaxException(getPosition(((Node)yyVals[-1+yyTop])), "Both block arg and actual block given.");
@@ -2251,91 +2255,91 @@
               }
   break;
 case 291:
-					// line 1078 "DefaultRubyParser.y"
+					// line 1082 "DefaultRubyParser.y"
   {
                   yyVal = new IfNode(support.union(((Token)yyVals[-5+yyTop]), ((Token)yyVals[0+yyTop])), support.getConditionNode(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-2+yyTop]), ((Node)yyVals[-1+yyTop]));
               }
   break;
 case 292:
-					// line 1081 "DefaultRubyParser.y"
+					// line 1085 "DefaultRubyParser.y"
   {
                   yyVal = new IfNode(support.union(((Token)yyVals[-5+yyTop]), ((Token)yyVals[0+yyTop])), support.getConditionNode(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[-2+yyTop]));
               }
   break;
 case 293:
-					// line 1084 "DefaultRubyParser.y"
+					// line 1088 "DefaultRubyParser.y"
   { 
                   lexer.getConditionState().begin();
 	      }
   break;
 case 294:
-					// line 1086 "DefaultRubyParser.y"
+					// line 1090 "DefaultRubyParser.y"
   {
 		  lexer.getConditionState().end();
 	      }
   break;
 case 295:
-					// line 1088 "DefaultRubyParser.y"
+					// line 1092 "DefaultRubyParser.y"
   {
-                  yyVal = new WhileNode(getPosition(((Token)yyVals[-6+yyTop])), support.getConditionNode(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-1+yyTop]));
+                  yyVal = new WhileNode(support.union(((Token)yyVals[-6+yyTop]), ((Token)yyVals[0+yyTop])), support.getConditionNode(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-1+yyTop]));
               }
   break;
 case 296:
-					// line 1091 "DefaultRubyParser.y"
+					// line 1095 "DefaultRubyParser.y"
   {
                   lexer.getConditionState().begin();
               }
   break;
 case 297:
-					// line 1093 "DefaultRubyParser.y"
+					// line 1097 "DefaultRubyParser.y"
   {
                   lexer.getConditionState().end();
               }
   break;
 case 298:
-					// line 1095 "DefaultRubyParser.y"
+					// line 1099 "DefaultRubyParser.y"
   {
                   yyVal = new UntilNode(getPosition(((Token)yyVals[-6+yyTop])), support.getConditionNode(((Node)yyVals[-4+yyTop])), ((Node)yyVals[-1+yyTop]));
               }
   break;
 case 299:
-					// line 1098 "DefaultRubyParser.y"
+					// line 1102 "DefaultRubyParser.y"
   {
                   yyVal = new CaseNode(support.union(((Token)yyVals[-4+yyTop]), ((Token)yyVals[0+yyTop])), ((Node)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]));
               }
   break;
 case 300:
-					// line 1101 "DefaultRubyParser.y"
+					// line 1105 "DefaultRubyParser.y"
   {
                   yyVal = new CaseNode(support.union(((Token)yyVals[-3+yyTop]), ((Token)yyVals[0+yyTop])), null, ((Node)yyVals[-1+yyTop]));
               }
   break;
 case 301:
-					// line 1104 "DefaultRubyParser.y"
+					// line 1108 "DefaultRubyParser.y"
   {
 		  yyVal = ((Node)yyVals[-1+yyTop]);
               }
   break;
 case 302:
-					// line 1107 "DefaultRubyParser.y"
+					// line 1111 "DefaultRubyParser.y"
   {
                   lexer.getConditionState().begin();
               }
   break;
 case 303:
-					// line 1109 "DefaultRubyParser.y"
+					// line 1113 "DefaultRubyParser.y"
   {
                   lexer.getConditionState().end();
               }
   break;
 case 304:
-					// line 1111 "DefaultRubyParser.y"
+					// line 1115 "DefaultRubyParser.y"
   {
                   yyVal = new ForNode(support.union(((Token)yyVals[-8+yyTop]), ((Token)yyVals[0+yyTop])), ((Node)yyVals[-7+yyTop]), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[-4+yyTop]));
               }
   break;
 case 305:
-					// line 1114 "DefaultRubyParser.y"
+					// line 1118 "DefaultRubyParser.y"
   {
                   if (support.isInDef() || support.isInSingle()) {
                       yyerror("class definition in method body");
@@ -2344,21 +2348,21 @@
               }
   break;
 case 306:
-					// line 1119 "DefaultRubyParser.y"
+					// line 1123 "DefaultRubyParser.y"
   {
-                  yyVal = new ClassNode(support.union(((Token)yyVals[-5+yyTop]), ((Token)yyVals[0+yyTop])), ((Node)yyVals[-4+yyTop]), support.getCurrentScope(), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[-3+yyTop]));
+                  yyVal = new ClassNode(support.union(((Token)yyVals[-5+yyTop]), ((Token)yyVals[0+yyTop])), ((Colon3Node)yyVals[-4+yyTop]), support.getCurrentScope(), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[-3+yyTop]));
                   support.popCurrentScope();
               }
   break;
 case 307:
-					// line 1123 "DefaultRubyParser.y"
+					// line 1127 "DefaultRubyParser.y"
   {
                   yyVal = new Boolean(support.isInDef());
                   support.setInDef(false);
               }
   break;
 case 308:
-					// line 1126 "DefaultRubyParser.y"
+					// line 1130 "DefaultRubyParser.y"
   {
                   yyVal = new Integer(support.getInSingle());
                   support.setInSingle(0);
@@ -2366,7 +2370,7 @@
               }
   break;
 case 309:
-					// line 1130 "DefaultRubyParser.y"
+					// line 1134 "DefaultRubyParser.y"
   {
                   yyVal = new SClassNode(support.union(((Token)yyVals[-7+yyTop]), ((Token)yyVals[0+yyTop])), ((Node)yyVals[-5+yyTop]), support.getCurrentScope(), ((Node)yyVals[-1+yyTop]));
                   support.popCurrentScope();
@@ -2375,7 +2379,7 @@
               }
   break;
 case 310:
-					// line 1136 "DefaultRubyParser.y"
+					// line 1140 "DefaultRubyParser.y"
   {
                   if (support.isInDef() || support.isInSingle()) { 
                       yyerror("module definition in method body");
@@ -2384,36 +2388,36 @@
               }
   break;
 case 311:
-					// line 1141 "DefaultRubyParser.y"
+					// line 1145 "DefaultRubyParser.y"
   {
-                  yyVal = new ModuleNode(support.union(((Token)yyVals[-4+yyTop]), ((Token)yyVals[0+yyTop])), ((Node)yyVals[-3+yyTop]), support.getCurrentScope(), ((Node)yyVals[-1+yyTop]));
+                  yyVal = new ModuleNode(support.union(((Token)yyVals[-4+yyTop]), ((Token)yyVals[0+yyTop])), ((Colon3Node)yyVals[-3+yyTop]), support.getCurrentScope(), ((Node)yyVals[-1+yyTop]));
                   support.popCurrentScope();
               }
   break;
 case 312:
-					// line 1145 "DefaultRubyParser.y"
+					// line 1149 "DefaultRubyParser.y"
   {
                   support.setInDef(true);
 		  support.pushLocalScope();
               }
   break;
 case 313:
-					// line 1148 "DefaultRubyParser.y"
+					// line 1152 "DefaultRubyParser.y"
   {
                     /* NOEX_PRIVATE for toplevel */
-                  yyVal = new DefnNode(support.union(((Token)yyVals[-5+yyTop]), ((Token)yyVals[0+yyTop])), new ArgumentNode(((Token)yyVals[-4+yyTop]).getPosition(), (String) ((Token)yyVals[-4+yyTop]).getValue()), ((Node)yyVals[-2+yyTop]), support.getCurrentScope(), ((Node)yyVals[-1+yyTop]), Visibility.PRIVATE);
+                  yyVal = new DefnNode(support.union(((Token)yyVals[-5+yyTop]), ((Token)yyVals[0+yyTop])), new ArgumentNode(((Token)yyVals[-4+yyTop]).getPosition(), (String) ((Token)yyVals[-4+yyTop]).getValue()), ((ArgsNode)yyVals[-2+yyTop]), support.getCurrentScope(), ((Node)yyVals[-1+yyTop]), Visibility.PRIVATE);
                   support.popCurrentScope();
                   support.setInDef(false);
               }
   break;
 case 314:
-					// line 1154 "DefaultRubyParser.y"
+					// line 1158 "DefaultRubyParser.y"
   {
                   lexer.setState(LexState.EXPR_FNAME);
               }
   break;
 case 315:
-					// line 1156 "DefaultRubyParser.y"
+					// line 1160 "DefaultRubyParser.y"
   {
                   support.setInSingle(support.getInSingle() + 1);
 		  support.pushLocalScope();
@@ -2421,74 +2425,75 @@
               }
   break;
 case 316:
-					// line 1160 "DefaultRubyParser.y"
+					// line 1164 "DefaultRubyParser.y"
   {
-                  yyVal = new DefsNode(support.union(((Token)yyVals[-8+yyTop]), ((Token)yyVals[0+yyTop])), ((Node)yyVals[-7+yyTop]), (String) ((Token)yyVals[-4+yyTop]).getValue(), ((Node)yyVals[-2+yyTop]), support.getCurrentScope(), ((Node)yyVals[-1+yyTop]));
+                  yyVal = new DefsNode(support.union(((Token)yyVals[-8+yyTop]), ((Token)yyVals[0+yyTop])), ((Node)yyVals[-7+yyTop]), new ArgumentNode(((Token)yyVals[-4+yyTop]).getPosition(), (String) ((Token)yyVals[-4+yyTop]).getValue()), ((ArgsNode)yyVals[-2+yyTop]), support.getCurrentScope(), ((Node)yyVals[-1+yyTop]));
                   support.popCurrentScope();
                   support.setInSingle(support.getInSingle() - 1);
               }
   break;
 case 317:
-					// line 1165 "DefaultRubyParser.y"
+					// line 1169 "DefaultRubyParser.y"
   {
                   yyVal = new BreakNode(((Token)yyVals[0+yyTop]).getPosition());
               }
   break;
 case 318:
-					// line 1168 "DefaultRubyParser.y"
+					// line 1172 "DefaultRubyParser.y"
   {
                   yyVal = new NextNode(((Token)yyVals[0+yyTop]).getPosition());
               }
   break;
 case 319:
-					// line 1171 "DefaultRubyParser.y"
+					// line 1175 "DefaultRubyParser.y"
   {
                   yyVal = new RedoNode(((Token)yyVals[0+yyTop]).getPosition());
               }
   break;
 case 320:
-					// line 1174 "DefaultRubyParser.y"
+					// line 1178 "DefaultRubyParser.y"
   {
                   yyVal = new RetryNode(((Token)yyVals[0+yyTop]).getPosition());
               }
   break;
 case 321:
-					// line 1178 "DefaultRubyParser.y"
+					// line 1182 "DefaultRubyParser.y"
   {
                   support.checkExpression(((Node)yyVals[0+yyTop]));
 		  yyVal = ((Node)yyVals[0+yyTop]);
 	      }
   break;
 case 330:
-					// line 1193 "DefaultRubyParser.y"
+					// line 1197 "DefaultRubyParser.y"
   {
+/*mirko: support.union($<ISourcePositionHolder>1.getPosition(), getPosition($<ISourcePositionHolder>1)) ?*/
                   yyVal = new IfNode(getPosition(((Token)yyVals[-4+yyTop])), support.getConditionNode(((Node)yyVals[-3+yyTop])), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 332:
-					// line 1198 "DefaultRubyParser.y"
+					// line 1203 "DefaultRubyParser.y"
   {
                   yyVal = ((Node)yyVals[0+yyTop]);
               }
   break;
 case 334:
-					// line 1203 "DefaultRubyParser.y"
+					// line 1208 "DefaultRubyParser.y"
   {}
   break;
 case 336:
-					// line 1206 "DefaultRubyParser.y"
+					// line 1211 "DefaultRubyParser.y"
   {
                   yyVal = new ZeroArgNode(support.union(((Token)yyVals[-1+yyTop]), ((Token)yyVals[0+yyTop])));
               }
   break;
 case 337:
-					// line 1209 "DefaultRubyParser.y"
+					// line 1214 "DefaultRubyParser.y"
   {
                   yyVal = new ZeroArgNode(((Token)yyVals[0+yyTop]).getPosition());
 	      }
   break;
 case 338:
-					// line 1212 "DefaultRubyParser.y"
+					// line 1217 "DefaultRubyParser.y"
   {
                   yyVal = ((Node)yyVals[-1+yyTop]);
 
@@ -2499,20 +2504,20 @@
               }
   break;
 case 339:
-					// line 1221 "DefaultRubyParser.y"
+					// line 1226 "DefaultRubyParser.y"
   {
                   support.pushBlockScope();
 	      }
   break;
 case 340:
-					// line 1223 "DefaultRubyParser.y"
+					// line 1228 "DefaultRubyParser.y"
   {
                   yyVal = new IterNode(support.union(((Token)yyVals[-4+yyTop]), ((Token)yyVals[0+yyTop])), ((Node)yyVals[-2+yyTop]), support.getCurrentScope(), ((Node)yyVals[-1+yyTop]), null);
                   support.popCurrentScope();
               }
   break;
 case 341:
-					// line 1228 "DefaultRubyParser.y"
+					// line 1233 "DefaultRubyParser.y"
   {
                   if (((Node)yyVals[-1+yyTop]) instanceof BlockPassNode) {
                       throw new SyntaxException(getPosition(((Node)yyVals[-1+yyTop])), "Both block arg and actual block given.");
@@ -2522,103 +2527,107 @@
               }
   break;
 case 342:
-					// line 1235 "DefaultRubyParser.y"
+					// line 1240 "DefaultRubyParser.y"
   {
                   yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((Token)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 343:
-					// line 1238 "DefaultRubyParser.y"
+					// line 1243 "DefaultRubyParser.y"
   {
                   yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((Token)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 344:
-					// line 1242 "DefaultRubyParser.y"
+					// line 1247 "DefaultRubyParser.y"
   {
                   yyVal = support.new_fcall(((Token)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 345:
-					// line 1245 "DefaultRubyParser.y"
+					// line 1250 "DefaultRubyParser.y"
   {
                   yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((Token)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 346:
-					// line 1248 "DefaultRubyParser.y"
+					// line 1253 "DefaultRubyParser.y"
   {
                   yyVal = support.new_call(((Node)yyVals[-3+yyTop]), ((Token)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 347:
-					// line 1251 "DefaultRubyParser.y"
+					// line 1256 "DefaultRubyParser.y"
   {
                   yyVal = support.new_call(((Node)yyVals[-2+yyTop]), ((Token)yyVals[0+yyTop]), null);
               }
   break;
 case 348:
-					// line 1254 "DefaultRubyParser.y"
+					// line 1259 "DefaultRubyParser.y"
   {
                   yyVal = support.new_super(((Node)yyVals[0+yyTop]), ((Token)yyVals[-1+yyTop]));
               }
   break;
 case 349:
-					// line 1257 "DefaultRubyParser.y"
+					// line 1262 "DefaultRubyParser.y"
   {
-                  yyVal = new ZSuperNode(getPosition(((Token)yyVals[0+yyTop])));
+                  yyVal = new ZSuperNode(((Token)yyVals[0+yyTop]).getPosition());
               }
   break;
 case 350:
-					// line 1262 "DefaultRubyParser.y"
+					// line 1267 "DefaultRubyParser.y"
   {
                   support.pushBlockScope();
 	      }
   break;
 case 351:
-					// line 1264 "DefaultRubyParser.y"
+					// line 1269 "DefaultRubyParser.y"
   {
                   yyVal = new IterNode(support.union(((Token)yyVals[-4+yyTop]), ((Token)yyVals[0+yyTop])), ((Node)yyVals[-2+yyTop]), support.getCurrentScope(), ((Node)yyVals[-1+yyTop]), null);
                   support.popCurrentScope();
               }
   break;
 case 352:
-					// line 1268 "DefaultRubyParser.y"
+					// line 1273 "DefaultRubyParser.y"
   {
                   support.pushBlockScope();
 	      }
   break;
 case 353:
-					// line 1270 "DefaultRubyParser.y"
+					// line 1275 "DefaultRubyParser.y"
   {
                   yyVal = new IterNode(support.union(((Token)yyVals[-4+yyTop]), ((Token)yyVals[0+yyTop])), ((Node)yyVals[-2+yyTop]), support.getCurrentScope(), ((Node)yyVals[-1+yyTop]), null);
                   support.popCurrentScope();
               }
   break;
 case 354:
-					// line 1275 "DefaultRubyParser.y"
+					// line 1280 "DefaultRubyParser.y"
   {
+/*mirko support.union($1, support.unwrapNewlineNode($4))?*/
                   yyVal = new WhenNode(((Token)yyVals[-4+yyTop]).getPosition(), ((ListNode)yyVals[-3+yyTop]), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 356:
-					// line 1280 "DefaultRubyParser.y"
+					// line 1286 "DefaultRubyParser.y"
   {
                   yyVal = ((ListNode)yyVals[-3+yyTop]).add(new WhenNode(getPosition(((ListNode)yyVals[-3+yyTop])), ((Node)yyVals[0+yyTop]), null, null));
               }
   break;
 case 357:
-					// line 1283 "DefaultRubyParser.y"
+					// line 1289 "DefaultRubyParser.y"
   {
                   yyVal = new ArrayNode(getPosition(((Token)yyVals[-1+yyTop])), new WhenNode(getPosition(((Token)yyVals[-1+yyTop])), ((Node)yyVals[0+yyTop]), null, null));
               }
   break;
 case 360:
-					// line 1290 "DefaultRubyParser.y"
+					// line 1296 "DefaultRubyParser.y"
   {
                   Node node;
                   if (((Node)yyVals[-3+yyTop]) != null) {
                      node = support.appendToBlock(support.node_assign(((Node)yyVals[-3+yyTop]), new GlobalVarNode(getPosition(((Token)yyVals[-5+yyTop])), "$!")), ((Node)yyVals[-1+yyTop]));
+                     if(((Node)yyVals[-1+yyTop]) != null) {
+                        node.setPosition(support.unwrapNewlineNode(((Node)yyVals[-1+yyTop])).getPosition());
+                     }
 		  } else {
 		     node = ((Node)yyVals[-1+yyTop]);
                   }
@@ -2626,23 +2635,23 @@
 	      }
   break;
 case 361:
-					// line 1299 "DefaultRubyParser.y"
+					// line 1308 "DefaultRubyParser.y"
   {yyVal = null;}
   break;
 case 362:
-					// line 1301 "DefaultRubyParser.y"
+					// line 1310 "DefaultRubyParser.y"
   {
                   yyVal = new ArrayNode(((Node)yyVals[0+yyTop]).getPosition(), ((Node)yyVals[0+yyTop]));
 	      }
   break;
 case 365:
-					// line 1307 "DefaultRubyParser.y"
+					// line 1316 "DefaultRubyParser.y"
   {
                   yyVal = ((Node)yyVals[0+yyTop]);
               }
   break;
 case 367:
-					// line 1312 "DefaultRubyParser.y"
+					// line 1321 "DefaultRubyParser.y"
   {
                   if (((Node)yyVals[0+yyTop]) != null) {
                       yyVal = ((Node)yyVals[0+yyTop]);
@@ -2652,13 +2661,13 @@
               }
   break;
 case 370:
-					// line 1322 "DefaultRubyParser.y"
+					// line 1331 "DefaultRubyParser.y"
   {
                   yyVal = new SymbolNode(((Token)yyVals[0+yyTop]).getPosition(), (String) ((Token)yyVals[0+yyTop]).getValue());
               }
   break;
 case 372:
-					// line 1327 "DefaultRubyParser.y"
+					// line 1336 "DefaultRubyParser.y"
   {
                   if (((Node)yyVals[0+yyTop]) instanceof EvStrNode) {
                       yyVal = new DStrNode(getPosition(((Node)yyVals[0+yyTop]))).add(((Node)yyVals[0+yyTop]));
@@ -2668,13 +2677,13 @@
 	      }
   break;
 case 374:
-					// line 1336 "DefaultRubyParser.y"
+					// line 1345 "DefaultRubyParser.y"
   {
-                  yyVal = support.literal_concat(((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
+                  yyVal = support.literal_concat(getPosition(((Node)yyVals[-1+yyTop])), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 375:
-					// line 1340 "DefaultRubyParser.y"
+					// line 1349 "DefaultRubyParser.y"
   {
                   yyVal = ((Node)yyVals[-1+yyTop]);
                   ((ISourcePositionHolder)yyVal).setPosition(support.union(((Token)yyVals[-2+yyTop]), ((Token)yyVals[0+yyTop])));
@@ -2692,7 +2701,7 @@
               }
   break;
 case 376:
-					// line 1356 "DefaultRubyParser.y"
+					// line 1365 "DefaultRubyParser.y"
   {
                   ISourcePosition position = support.union(((Token)yyVals[-2+yyTop]), ((Token)yyVals[0+yyTop]));
 
@@ -2711,7 +2720,7 @@
               }
   break;
 case 377:
-					// line 1373 "DefaultRubyParser.y"
+					// line 1382 "DefaultRubyParser.y"
   {
 		  int options = ((RegexpNode)yyVals[0+yyTop]).getOptions();
 		  Node node = ((Node)yyVals[-1+yyTop]);
@@ -2719,7 +2728,7 @@
 		  if (node == null) {
 		      yyVal = new RegexpNode(getPosition(((Token)yyVals[-2+yyTop])), "", options & ~ReOptions.RE_OPTION_ONCE);
 		  } else if (node instanceof StrNode) {
-		      yyVal = new RegexpNode(getPosition(((Token)yyVals[-2+yyTop])), ((StrNode) node).getValue(), options & ~ReOptions.RE_OPTION_ONCE);
+		      yyVal = new RegexpNode(((Node)yyVals[-1+yyTop]).getPosition(), ((StrNode) node).getValue(), options & ~ReOptions.RE_OPTION_ONCE);
 		  } else {
 		      if (node instanceof DStrNode == false) {
 			  node = new DStrNode(getPosition(((Token)yyVals[-2+yyTop]))).add(new ArrayNode(getPosition(((Token)yyVals[-2+yyTop])), node));
@@ -2730,93 +2739,93 @@
 	       }
   break;
 case 378:
-					// line 1390 "DefaultRubyParser.y"
+					// line 1399 "DefaultRubyParser.y"
   {
                    yyVal = new ZArrayNode(support.union(((Token)yyVals[-2+yyTop]), ((Token)yyVals[0+yyTop])));
 	       }
   break;
 case 379:
-					// line 1393 "DefaultRubyParser.y"
+					// line 1402 "DefaultRubyParser.y"
   {
 		   yyVal = ((ListNode)yyVals[-1+yyTop]);
                    ((ISourcePositionHolder)yyVal).setPosition(support.union(((Token)yyVals[-2+yyTop]), ((Token)yyVals[0+yyTop])));
 	       }
   break;
 case 380:
-					// line 1398 "DefaultRubyParser.y"
+					// line 1407 "DefaultRubyParser.y"
   {
                    yyVal = new ArrayNode(getPosition(null));
 	       }
   break;
 case 381:
-					// line 1401 "DefaultRubyParser.y"
+					// line 1410 "DefaultRubyParser.y"
   {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[-1+yyTop]) instanceof EvStrNode ? new DStrNode(getPosition(((ListNode)yyVals[-2+yyTop]))).add(((Node)yyVals[-1+yyTop])) : ((Node)yyVals[-1+yyTop]));
 	       }
   break;
 case 383:
-					// line 1406 "DefaultRubyParser.y"
+					// line 1415 "DefaultRubyParser.y"
   {
-                   yyVal = support.literal_concat(((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
+                   yyVal = support.literal_concat(getPosition(((Node)yyVals[-1+yyTop])), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
 	       }
   break;
 case 384:
-					// line 1410 "DefaultRubyParser.y"
+					// line 1419 "DefaultRubyParser.y"
   {
                    yyVal = new ZArrayNode(support.union(((Token)yyVals[-2+yyTop]), ((Token)yyVals[0+yyTop])));
 	       }
   break;
 case 385:
-					// line 1413 "DefaultRubyParser.y"
+					// line 1422 "DefaultRubyParser.y"
   {
 		   yyVal = ((ListNode)yyVals[-1+yyTop]);
                    ((ISourcePositionHolder)yyVal).setPosition(support.union(((Token)yyVals[-2+yyTop]), ((Token)yyVals[0+yyTop])));
 	       }
   break;
 case 386:
-					// line 1418 "DefaultRubyParser.y"
+					// line 1427 "DefaultRubyParser.y"
   {
                    yyVal = new ArrayNode(getPosition(null));
 	       }
   break;
 case 387:
-					// line 1421 "DefaultRubyParser.y"
+					// line 1430 "DefaultRubyParser.y"
   {
                    yyVal = ((ListNode)yyVals[-2+yyTop]).add(((Node)yyVals[-1+yyTop]));
 	       }
   break;
 case 388:
-					// line 1425 "DefaultRubyParser.y"
+					// line 1434 "DefaultRubyParser.y"
   {
-                   yyVal = new StrNode(getPosition(null), "");
+                   yyVal = new StrNode(((Token)yyVals[0+yyTop]).getPosition(), "");
 	       }
   break;
 case 389:
-					// line 1428 "DefaultRubyParser.y"
+					// line 1437 "DefaultRubyParser.y"
   {
-                   yyVal = support.literal_concat(((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
+                   yyVal = support.literal_concat(getPosition(((Node)yyVals[-1+yyTop])), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
 	       }
   break;
 case 390:
-					// line 1432 "DefaultRubyParser.y"
+					// line 1441 "DefaultRubyParser.y"
   {
 		   yyVal = null;
 	       }
   break;
 case 391:
-					// line 1435 "DefaultRubyParser.y"
+					// line 1444 "DefaultRubyParser.y"
   {
-                   yyVal = support.literal_concat(((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
+                   yyVal = support.literal_concat(getPosition(((Node)yyVals[-1+yyTop])), ((Node)yyVals[-1+yyTop]), ((Node)yyVals[0+yyTop]));
 	       }
   break;
 case 392:
-					// line 1439 "DefaultRubyParser.y"
+					// line 1448 "DefaultRubyParser.y"
   {
                    yyVal = ((Node)yyVals[0+yyTop]);
                }
   break;
 case 393:
-					// line 1442 "DefaultRubyParser.y"
+					// line 1451 "DefaultRubyParser.y"
   {
                    yyVal = lexer.getStrTerm();
 		   lexer.setStrTerm(null);
@@ -2824,14 +2833,14 @@
 	       }
   break;
 case 394:
-					// line 1446 "DefaultRubyParser.y"
+					// line 1455 "DefaultRubyParser.y"
   {
 		   lexer.setStrTerm(((StrTerm)yyVals[-1+yyTop]));
 	           yyVal = new EvStrNode(support.union(((Token)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop])), ((Node)yyVals[0+yyTop]));
 	       }
   break;
 case 395:
-					// line 1450 "DefaultRubyParser.y"
+					// line 1459 "DefaultRubyParser.y"
   {
 		   yyVal = lexer.getStrTerm();
 		   lexer.setStrTerm(null);
@@ -2839,7 +2848,7 @@
 	       }
   break;
 case 396:
-					// line 1454 "DefaultRubyParser.y"
+					// line 1463 "DefaultRubyParser.y"
   {
 		   lexer.setStrTerm(((StrTerm)yyVals[-2+yyTop]));
 
@@ -2847,25 +2856,25 @@
 	       }
   break;
 case 397:
-					// line 1460 "DefaultRubyParser.y"
+					// line 1469 "DefaultRubyParser.y"
   {
                    yyVal = new GlobalVarNode(((Token)yyVals[0+yyTop]).getPosition(), (String) ((Token)yyVals[0+yyTop]).getValue());
                }
   break;
 case 398:
-					// line 1463 "DefaultRubyParser.y"
+					// line 1472 "DefaultRubyParser.y"
   {
                    yyVal = new InstVarNode(((Token)yyVals[0+yyTop]).getPosition(), (String) ((Token)yyVals[0+yyTop]).getValue());
                }
   break;
 case 399:
-					// line 1466 "DefaultRubyParser.y"
+					// line 1475 "DefaultRubyParser.y"
   {
                    yyVal = new ClassVarNode(((Token)yyVals[0+yyTop]).getPosition(), (String) ((Token)yyVals[0+yyTop]).getValue());
                }
   break;
 case 401:
-					// line 1472 "DefaultRubyParser.y"
+					// line 1481 "DefaultRubyParser.y"
   {
                    lexer.setState(LexState.EXPR_END);
                    yyVal = ((Token)yyVals[0+yyTop]);
@@ -2873,7 +2882,7 @@
                }
   break;
 case 406:
-					// line 1480 "DefaultRubyParser.y"
+					// line 1489 "DefaultRubyParser.y"
   {
                    lexer.setState(LexState.EXPR_END);
 
@@ -2903,92 +2912,92 @@
 	       }
   break;
 case 409:
-					// line 1510 "DefaultRubyParser.y"
+					// line 1519 "DefaultRubyParser.y"
   {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[0+yyTop]), "-@");
 	       }
   break;
 case 410:
-					// line 1513 "DefaultRubyParser.y"
+					// line 1522 "DefaultRubyParser.y"
   {
                    yyVal = support.getOperatorCallNode(((Node)yyVals[0+yyTop]), "-@");
 	       }
   break;
 case 416:
-					// line 1519 "DefaultRubyParser.y"
+					// line 1528 "DefaultRubyParser.y"
   { 
 		   yyVal = new Token("nil", ((Token)yyVals[0+yyTop]).getPosition());
                }
   break;
 case 417:
-					// line 1522 "DefaultRubyParser.y"
+					// line 1531 "DefaultRubyParser.y"
   {
 		   yyVal = new Token("self", ((Token)yyVals[0+yyTop]).getPosition());
                }
   break;
 case 418:
-					// line 1525 "DefaultRubyParser.y"
+					// line 1534 "DefaultRubyParser.y"
   { 
 		   yyVal = new Token("true", ((Token)yyVals[0+yyTop]).getPosition());
                }
   break;
 case 419:
-					// line 1528 "DefaultRubyParser.y"
+					// line 1537 "DefaultRubyParser.y"
   {
 		   yyVal = new Token("false", ((Token)yyVals[0+yyTop]).getPosition());
                }
   break;
 case 420:
-					// line 1531 "DefaultRubyParser.y"
+					// line 1540 "DefaultRubyParser.y"
   {
 		   yyVal = new Token("__FILE__", ((Token)yyVals[0+yyTop]).getPosition());
                }
   break;
 case 421:
-					// line 1534 "DefaultRubyParser.y"
+					// line 1543 "DefaultRubyParser.y"
   {
 		   yyVal = new Token("__LINE__", ((Token)yyVals[0+yyTop]).getPosition());
                }
   break;
 case 422:
-					// line 1538 "DefaultRubyParser.y"
+					// line 1547 "DefaultRubyParser.y"
   {
 		   yyVal = support.gettable((String) ((Token)yyVals[0+yyTop]).getValue(), ((Token)yyVals[0+yyTop]).getPosition());
                }
   break;
 case 423:
-					// line 1542 "DefaultRubyParser.y"
+					// line 1551 "DefaultRubyParser.y"
   {
                    yyVal = support.assignable(((Token)yyVals[0+yyTop]), null);
                }
   break;
 case 426:
-					// line 1548 "DefaultRubyParser.y"
+					// line 1557 "DefaultRubyParser.y"
   {
                    yyVal = null;
                }
   break;
 case 427:
-					// line 1551 "DefaultRubyParser.y"
+					// line 1560 "DefaultRubyParser.y"
   {
                    lexer.setState(LexState.EXPR_BEG);
                }
   break;
 case 428:
-					// line 1553 "DefaultRubyParser.y"
+					// line 1562 "DefaultRubyParser.y"
   {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
   break;
 case 429:
-					// line 1556 "DefaultRubyParser.y"
+					// line 1565 "DefaultRubyParser.y"
   {
                    yyerrok();
                    yyVal = null;
                }
   break;
 case 430:
-					// line 1562 "DefaultRubyParser.y"
+					// line 1571 "DefaultRubyParser.y"
   {
                    yyVal = ((Node)yyVals[-2+yyTop]);
                    ((ISourcePositionHolder)yyVal).setPosition(support.union(((Token)yyVals[-3+yyTop]), ((Token)yyVals[0+yyTop])));
@@ -2996,85 +3005,86 @@
                }
   break;
 case 431:
-					// line 1567 "DefaultRubyParser.y"
+					// line 1576 "DefaultRubyParser.y"
   {
                    yyVal = ((Node)yyVals[-1+yyTop]);
                }
   break;
 case 432:
-					// line 1571 "DefaultRubyParser.y"
+					// line 1580 "DefaultRubyParser.y"
   {
-                   yyVal = new ArgsNode(getPosition(((ListNode)yyVals[-5+yyTop])), ((ListNode)yyVals[-5+yyTop]), ((ListNode)yyVals[-3+yyTop]), ((Integer) ((Token)yyVals[-1+yyTop]).getValue()).intValue(), ((BlockArgNode)yyVals[0+yyTop]));
+                   yyVal = new ArgsNode(support.union(((ListNode)yyVals[-5+yyTop]), ((BlockArgNode)yyVals[0+yyTop])), ((ListNode)yyVals[-5+yyTop]), ((ListNode)yyVals[-3+yyTop]), ((Integer) ((Token)yyVals[-1+yyTop]).getValue()).intValue(), ((BlockArgNode)yyVals[0+yyTop]));
                }
   break;
 case 433:
-					// line 1574 "DefaultRubyParser.y"
+					// line 1583 "DefaultRubyParser.y"
   {
                    yyVal = new ArgsNode(getPosition(((ListNode)yyVals[-3+yyTop])), ((ListNode)yyVals[-3+yyTop]), ((ListNode)yyVals[-1+yyTop]), -1, ((BlockArgNode)yyVals[0+yyTop]));
                }
   break;
 case 434:
-					// line 1577 "DefaultRubyParser.y"
+					// line 1586 "DefaultRubyParser.y"
   {
-                   yyVal = new ArgsNode(getPosition(((ListNode)yyVals[-3+yyTop])), ((ListNode)yyVals[-3+yyTop]), null, ((Integer) ((Token)yyVals[-1+yyTop]).getValue()).intValue(), ((BlockArgNode)yyVals[0+yyTop]));
+                   yyVal = new ArgsNode(support.union(((ListNode)yyVals[-3+yyTop]), ((BlockArgNode)yyVals[0+yyTop])), ((ListNode)yyVals[-3+yyTop]), null, ((Integer) ((Token)yyVals[-1+yyTop]).getValue()).intValue(), ((BlockArgNode)yyVals[0+yyTop]));
                }
   break;
 case 435:
-					// line 1580 "DefaultRubyParser.y"
+					// line 1589 "DefaultRubyParser.y"
   {
                    yyVal = new ArgsNode(((ISourcePositionHolder)yyVals[-1+yyTop]).getPosition(), ((ListNode)yyVals[-1+yyTop]), null, -1, ((BlockArgNode)yyVals[0+yyTop]));
                }
   break;
 case 436:
-					// line 1583 "DefaultRubyParser.y"
+					// line 1592 "DefaultRubyParser.y"
   {
                    yyVal = new ArgsNode(getPosition(((ListNode)yyVals[-3+yyTop])), null, ((ListNode)yyVals[-3+yyTop]), ((Integer) ((Token)yyVals[-1+yyTop]).getValue()).intValue(), ((BlockArgNode)yyVals[0+yyTop]));
                }
   break;
 case 437:
-					// line 1586 "DefaultRubyParser.y"
+					// line 1595 "DefaultRubyParser.y"
   {
                    yyVal = new ArgsNode(getPosition(((ListNode)yyVals[-1+yyTop])), null, ((ListNode)yyVals[-1+yyTop]), -1, ((BlockArgNode)yyVals[0+yyTop]));
                }
   break;
 case 438:
-					// line 1589 "DefaultRubyParser.y"
+					// line 1598 "DefaultRubyParser.y"
   {
                    yyVal = new ArgsNode(getPosition(((Token)yyVals[-1+yyTop])), null, null, ((Integer) ((Token)yyVals[-1+yyTop]).getValue()).intValue(), ((BlockArgNode)yyVals[0+yyTop]));
                }
   break;
 case 439:
-					// line 1592 "DefaultRubyParser.y"
+					// line 1601 "DefaultRubyParser.y"
   {
                    yyVal = new ArgsNode(getPosition(((BlockArgNode)yyVals[0+yyTop])), null, null, -1, ((BlockArgNode)yyVals[0+yyTop]));
                }
   break;
 case 440:
-					// line 1595 "DefaultRubyParser.y"
+					// line 1604 "DefaultRubyParser.y"
   {
-                   yyVal = new ArgsNode(getPosition(null), null, null, -1, null);
+                   /*take the last position from the lexer, this isn't entirely correct, but more accurate then getPosition(null). */
+                   yyVal = new ArgsNode(lexer.getPosition(), null, null, -1, null);
                }
   break;
 case 441:
-					// line 1599 "DefaultRubyParser.y"
+					// line 1609 "DefaultRubyParser.y"
   {
                    yyerror("formal argument cannot be a constant");
                }
   break;
 case 442:
-					// line 1602 "DefaultRubyParser.y"
+					// line 1612 "DefaultRubyParser.y"
   {
                    yyerror("formal argument cannot be an instance variable");
                }
   break;
 case 443:
-					// line 1605 "DefaultRubyParser.y"
+					// line 1615 "DefaultRubyParser.y"
   {
                    yyerror("formal argument cannot be a class variable");
                }
   break;
 case 444:
-					// line 1608 "DefaultRubyParser.y"
+					// line 1618 "DefaultRubyParser.y"
   {
                    String identifier = (String) ((Token)yyVals[0+yyTop]).getValue();
                    if (IdUtil.getVarType(identifier) != IdUtil.LOCAL_VAR) {
@@ -3088,14 +3098,14 @@
                }
   break;
 case 445:
-					// line 1620 "DefaultRubyParser.y"
+					// line 1630 "DefaultRubyParser.y"
   {
                     yyVal = new ListNode(((ISourcePositionHolder)yyVals[0+yyTop]).getPosition());
                     ((ListNode) yyVal).add(new ArgumentNode(((ISourcePositionHolder)yyVals[0+yyTop]).getPosition(), (String) ((Token)yyVals[0+yyTop]).getValue()));
                }
   break;
 case 446:
-					// line 1624 "DefaultRubyParser.y"
+					// line 1634 "DefaultRubyParser.y"
   {
                    ((ListNode)yyVals[-2+yyTop]).add(new ArgumentNode(((ISourcePositionHolder)yyVals[0+yyTop]).getPosition(), (String) ((Token)yyVals[0+yyTop]).getValue()));
                    ((ListNode)yyVals[-2+yyTop]).setPosition(support.union(((ListNode)yyVals[-2+yyTop]), ((Token)yyVals[0+yyTop])));
@@ -3103,7 +3113,7 @@
                }
   break;
 case 447:
-					// line 1630 "DefaultRubyParser.y"
+					// line 1640 "DefaultRubyParser.y"
   {
                    String identifier = (String) ((Token)yyVals[-2+yyTop]).getValue();
 
@@ -3117,19 +3127,19 @@
               }
   break;
 case 448:
-					// line 1642 "DefaultRubyParser.y"
+					// line 1652 "DefaultRubyParser.y"
   {
                   yyVal = new BlockNode(getPosition(((Node)yyVals[0+yyTop]))).add(((Node)yyVals[0+yyTop]));
               }
   break;
 case 449:
-					// line 1645 "DefaultRubyParser.y"
+					// line 1655 "DefaultRubyParser.y"
   {
                   yyVal = support.appendToBlock(((ListNode)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop]));
               }
   break;
 case 452:
-					// line 1651 "DefaultRubyParser.y"
+					// line 1661 "DefaultRubyParser.y"
   {
                   String identifier = (String) ((Token)yyVals[0+yyTop]).getValue();
 
@@ -3143,14 +3153,14 @@
               }
   break;
 case 453:
-					// line 1662 "DefaultRubyParser.y"
+					// line 1672 "DefaultRubyParser.y"
   {
                   ((Token)yyVals[0+yyTop]).setValue(new Integer(-2));
                   yyVal = ((Token)yyVals[0+yyTop]);
               }
   break;
 case 456:
-					// line 1669 "DefaultRubyParser.y"
+					// line 1679 "DefaultRubyParser.y"
   {
                   String identifier = (String) ((Token)yyVals[0+yyTop]).getValue();
 
@@ -3163,19 +3173,19 @@
               }
   break;
 case 457:
-					// line 1680 "DefaultRubyParser.y"
+					// line 1690 "DefaultRubyParser.y"
   {
                   yyVal = ((BlockArgNode)yyVals[0+yyTop]);
               }
   break;
 case 458:
-					// line 1683 "DefaultRubyParser.y"
+					// line 1693 "DefaultRubyParser.y"
   {
 	          yyVal = null;
 	      }
   break;
 case 459:
-					// line 1687 "DefaultRubyParser.y"
+					// line 1697 "DefaultRubyParser.y"
   {
                   if (!(((Node)yyVals[0+yyTop]) instanceof SelfNode)) {
 		      support.checkExpression(((Node)yyVals[0+yyTop]));
@@ -3184,13 +3194,13 @@
               }
   break;
 case 460:
-					// line 1693 "DefaultRubyParser.y"
+					// line 1703 "DefaultRubyParser.y"
   {
                   lexer.setState(LexState.EXPR_BEG);
               }
   break;
 case 461:
-					// line 1695 "DefaultRubyParser.y"
+					// line 1705 "DefaultRubyParser.y"
   {
                   if (((Node)yyVals[-2+yyTop]) instanceof ILiteralNode) {
                       yyerror("Can't define single method for literals.");
@@ -3200,19 +3210,19 @@
               }
   break;
 case 462:
-					// line 1705 "DefaultRubyParser.y"
+					// line 1715 "DefaultRubyParser.y"
   { /* [!null]*/
                   yyVal = new ArrayNode(getPosition(null));
               }
   break;
 case 463:
-					// line 1708 "DefaultRubyParser.y"
+					// line 1718 "DefaultRubyParser.y"
   { /* [!null]*/
                   yyVal = ((ListNode)yyVals[-1+yyTop]);
               }
   break;
 case 464:
-					// line 1711 "DefaultRubyParser.y"
+					// line 1721 "DefaultRubyParser.y"
   {
                   if (((ListNode)yyVals[-1+yyTop]).size() % 2 != 0) {
                       yyerror("Odd number list for Hash.");
@@ -3221,42 +3231,42 @@
               }
   break;
 case 466:
-					// line 1720 "DefaultRubyParser.y"
+					// line 1730 "DefaultRubyParser.y"
   { /* [!null]*/
                   yyVal = ((ListNode)yyVals[-2+yyTop]).addAll(((ListNode)yyVals[0+yyTop]));
               }
   break;
 case 467:
-					// line 1725 "DefaultRubyParser.y"
+					// line 1735 "DefaultRubyParser.y"
   { /* [!null]*/
                   yyVal = new ArrayNode(support.union(((Node)yyVals[-2+yyTop]), ((Node)yyVals[0+yyTop])), ((Node)yyVals[-2+yyTop])).add(((Node)yyVals[0+yyTop]));
               }
   break;
 case 487:
-					// line 1737 "DefaultRubyParser.y"
+					// line 1747 "DefaultRubyParser.y"
   {
                   yyerrok();
               }
   break;
 case 490:
-					// line 1743 "DefaultRubyParser.y"
+					// line 1753 "DefaultRubyParser.y"
   {
                   yyerrok();
               }
   break;
 case 491:
-					// line 1747 "DefaultRubyParser.y"
+					// line 1757 "DefaultRubyParser.y"
   {
                   yyVal = null;
               }
   break;
 case 492:
-					// line 1751 "DefaultRubyParser.y"
+					// line 1761 "DefaultRubyParser.y"
   {  
                   yyVal = null;
 	      }
   break;
-					// line 7424 "-"
+					// line 7434 "-"
         }
         yyTop -= yyLen[yyN];
         yyState = yyStates[yyTop];
@@ -3281,7 +3291,7 @@
     }
   }
 
-					// line 1756 "DefaultRubyParser.y"
+					// line 1766 "DefaultRubyParser.y"
 
     /** The parse method use an lexer stream and parse it to an AST node 
      * structure
@@ -3331,4 +3341,4 @@
 	return lexer.getPosition(null, inclusive);
     }
 }
-					// line 7504 "-"
+					// line 7514 "-"
Index: src/org/jruby/parser/ParserSupport.java
===================================================================
--- src/org/jruby/parser/ParserSupport.java	(revision 2701)
+++ src/org/jruby/parser/ParserSupport.java	(working copy)
@@ -94,6 +94,7 @@
 import org.jruby.common.IRubyWarnings;
 import org.jruby.lexer.yacc.ISourcePosition;
 import org.jruby.lexer.yacc.ISourcePositionHolder;
+import org.jruby.lexer.yacc.SourcePosition;
 import org.jruby.lexer.yacc.SyntaxException;
 import org.jruby.lexer.yacc.Token;
 import org.jruby.runtime.DynamicScope;
@@ -279,9 +280,25 @@
             second = ((NewlineNode) second).getNextNode();
         }
         
+        if(second == null) {
+        	return first.getPosition();
+        }
+        
         return first.getPosition().union(second.getPosition());
     }
     
+    public ISourcePosition union(ISourcePosition first, ISourcePosition second) {
+		assert first.getFile().equals(second.getFile());
+
+		if (first.getStartOffset() < second.getStartOffset()) {
+			return new SourcePosition(first.getFile(), first.getStartLine(),
+					second.getEndLine(), first.getStartOffset(), second.getEndOffset());
+		} else {
+			return new SourcePosition(first.getFile(), second.getStartLine(),
+					first.getEndLine(), second.getStartOffset(), first.getEndOffset());
+		}
+	}
+    
     public Node addRootNode(Node topOfAST) {
         // I am not sure we need to get AST to set AST and the appendToBlock could maybe get removed.
         // For sure once we do two pass parsing we should since this is mostly just optimzation.
@@ -298,9 +315,10 @@
         if (tail == null) return head;
         if (head == null) return tail;
         
-        while (head instanceof NewlineNode) {
-            head = ((NewlineNode) head).getNextNode();
-        }
+        //Mirko asks: This was added, and it breaks a lof of my code, is it really needed? 
+        //while (head instanceof NewlineNode) {
+        //    head = ((NewlineNode) head).getNextNode();
+        //}
 
         if (!(head instanceof BlockNode)) {
             head = new BlockNode(head.getPosition()).add(head);
@@ -309,6 +327,8 @@
         if (warnings.isVerbose() && isBreakStatement(((ListNode) head).getLast())) {
             warnings.warning(tail.getPosition(), "Statement not reached.");
         }
+        
+        head.setPosition(union(head, tail));
 
         // Assumption: tail is never a list node
         return ((ListNode) head).addAll(tail);
@@ -390,6 +410,7 @@
         checkExpression(rhs);
         if (lhs instanceof AssignableNode) {
     	    ((AssignableNode) lhs).setValueNode(rhs);
+    	    lhs.setPosition(union(lhs, rhs));
         } else if (lhs instanceof IArgumentNode) {
             IArgumentNode invokableNode = (IArgumentNode) lhs;
             
@@ -651,10 +672,10 @@
                 return args;
             }
             
-            return new CallNode(union(receiver, args), receiver,(String) name.getValue(), args);
+            return new CallNode(union(receiver, args), receiver, (String) name.getValue(), args);
         }
 
-        return new CallNode(union(receiver, name), receiver,(String) name.getValue(), args);
+        return new CallNode(union(receiver, name), receiver, (String) name.getValue(), args);
     }
 
     public Node new_fcall(Token operation, Node args) {
@@ -746,12 +767,12 @@
         this.warnings = warnings;
     }
     
-    public Node literal_concat(Node head, Node tail) { 
+    public Node literal_concat(ISourcePosition position, Node head, Node tail) { 
         if (head == null) return tail;
         if (tail == null) return head;
         
         if (head instanceof EvStrNode) {
-            head = new DStrNode(head.getPosition()).add(head);
+            head = new DStrNode(union(head.getPosition(), position)).add(head);
         } 
 
         if (tail instanceof StrNode) {
@@ -759,7 +780,9 @@
         	    return new StrNode(union(head, tail), 
                        ((StrNode) head).getValue() + ((StrNode) tail).getValue());
             } 
-        	return ((ListNode) head).add(tail);
+            head.setPosition(union(head, tail));
+            return ((ListNode) head).add(tail);
+        	
         } else if (tail instanceof DStrNode) {
             if (head instanceof StrNode){
                 ((DStrNode)tail).childNodes().add(0, head);
@@ -818,4 +841,11 @@
 
         return new YieldNode(position, node, state);
     }
+    
+    public Node unwrapNewlineNode(Node node) {
+    	if(node instanceof NewlineNode) {
+    		return ((NewlineNode) node).getNextNode();
+    	}
+    	return node;
+    }
 }
Index: src/org/jruby/parser/DefaultRubyParser.y
===================================================================
--- src/org/jruby/parser/DefaultRubyParser.y	(revision 2701)
+++ src/org/jruby/parser/DefaultRubyParser.y	(working copy)
@@ -305,7 +305,7 @@
 stmt          : kALIAS fitem {
                   lexer.setState(LexState.EXPR_FNAME);
               } fitem {
-                  $$ = new AliasNode(getPosition($1), (String) $2.getValue(), (String) $4.getValue());
+                  $$ = new AliasNode(support.union($1, $4), (String) $2.getValue(), (String) $4.getValue());
               }
               | kALIAS tGVAR tGVAR {
                   $$ = new VAliasNode(getPosition($1), (String) $2.getValue(), (String) $3.getValue());
@@ -418,6 +418,7 @@
 	      | mlhs '=' mrhs {
                   $<AssignableNode>1.setValueNode($3);
 		  $$ = $1;
+                  $1.setPosition(support.union($1, $3));
 	      }
               | expr 
 
@@ -527,7 +528,9 @@
                   $$ = new MultipleAsgnNode(getPosition($1), $1, null);
               }
               | mlhs_head mlhs_item {
-                  $$ = new MultipleAsgnNode(getPosition($1), $1.add($2), null);
+//mirko: check
+                  $$ = new MultipleAsgnNode(support.union($<Node>1, $<Node>2), $1.add($2), null);
+                  $<Node>1.setPosition(support.union($<Node>1, $<Node>2));
               }
               | mlhs_head tSTAR mlhs_node {
                   $$ = new MultipleAsgnNode(getPosition($1), $1, $3);
@@ -699,6 +702,7 @@
                       $$ = new OpAsgnAndNode(getPosition($1), support.gettable2(name, $1.getPosition()), $1);
 		  } else {
 		      $1.setValueNode(support.getOperatorCallNode(support.gettable2(name, $1.getPosition()), asgnOp, $3));
+                      $1.setPosition(support.union($1, $3));
 		      $$ = $1;
 		  }
               }
@@ -726,12 +730,12 @@
               | arg tDOT2 arg {
 		  support.checkExpression($1);
 		  support.checkExpression($3);
-                  $$ = new DotNode(getPosition($1), $1, $3, false);
+                  $$ = new DotNode(support.union($1, $3), $1, $3, false);
               }
               | arg tDOT3 arg {
 		  support.checkExpression($1);
 		  support.checkExpression($3);
-                  $$ = new DotNode(getPosition($1), $1, $3, true);
+                  $$ = new DotNode(support.union($1, $3), $1, $3, true);
               }
               | arg tPLUS arg {
                   $$ = support.getOperatorCallNode($1, "+", $3);
@@ -1044,7 +1048,7 @@
                   }
               }
               | tLBRACE assoc_list tRCURLY {
-                  $$ = new HashNode(getPosition($1), $2);
+                  $$ = new HashNode(support.union($1, $3), $2);
               }
               | kRETURN {
 		  $$ = new ReturnNode($1.getPosition(), null);
@@ -1086,7 +1090,7 @@
 	      } expr_value do {
 		  lexer.getConditionState().end();
 	      } compstmt kEND {
-                  $$ = new WhileNode(getPosition($1), support.getConditionNode($3), $6);
+                  $$ = new WhileNode(support.union($1, $7), support.getConditionNode($3), $6);
               }
               | kUNTIL {
                   lexer.getConditionState().begin();
@@ -1117,7 +1121,7 @@
                   }
 		  support.pushLocalScope();
               } bodystmt kEND {
-                  $$ = new ClassNode(support.union($1, $6), $2, support.getCurrentScope(), $5, $3);
+                  $$ = new ClassNode(support.union($1, $6), $<Colon3Node>2, support.getCurrentScope(), $5, $3);
                   support.popCurrentScope();
               }
               | kCLASS tLSHFT expr {
@@ -1139,7 +1143,7 @@
                   }
 		  support.pushLocalScope();
               } bodystmt kEND {
-                  $$ = new ModuleNode(support.union($1, $5), $2, support.getCurrentScope(), $4);
+                  $$ = new ModuleNode(support.union($1, $5), $<Colon3Node>2, support.getCurrentScope(), $4);
                   support.popCurrentScope();
               }
 	      | kDEF fname {
@@ -1147,7 +1151,7 @@
 		  support.pushLocalScope();
               } f_arglist bodystmt kEND {
                     /* NOEX_PRIVATE for toplevel */
-                  $$ = new DefnNode(support.union($1, $6), new ArgumentNode($2.getPosition(), (String) $2.getValue()), $4, support.getCurrentScope(), $5, Visibility.PRIVATE);
+                  $$ = new DefnNode(support.union($1, $6), new ArgumentNode($2.getPosition(), (String) $2.getValue()), $<ArgsNode>4, support.getCurrentScope(), $5, Visibility.PRIVATE);
                   support.popCurrentScope();
                   support.setInDef(false);
               }
@@ -1158,7 +1162,7 @@
 		  support.pushLocalScope();
                   lexer.setState(LexState.EXPR_END); /* force for args */
               } f_arglist bodystmt kEND {
-                  $$ = new DefsNode(support.union($1, $9), $2, (String) $5.getValue(), $7, support.getCurrentScope(), $8);
+                  $$ = new DefsNode(support.union($1, $9), $2, new ArgumentNode($5.getPosition(), (String) $5.getValue()), $<ArgsNode>7, support.getCurrentScope(), $8);
                   support.popCurrentScope();
                   support.setInSingle(support.getInSingle() - 1);
               }
@@ -1191,6 +1195,7 @@
 
 if_tail       : opt_else 
               | kELSIF expr_value then compstmt if_tail {
+//mirko: support.union($<ISourcePositionHolder>1.getPosition(), getPosition($<ISourcePositionHolder>1)) ?
                   $$ = new IfNode(getPosition($1), support.getConditionNode($2), $4, $5);
               }
 
@@ -1255,7 +1260,7 @@
                   $$ = support.new_super($2, $1);
               }
               | kSUPER {
-                  $$ = new ZSuperNode(getPosition($1));
+                  $$ = new ZSuperNode($1.getPosition());
               }
 
 // IterNode:brace_block - block invocation argument (foo >{...}< | foo >do end<) [!null]
@@ -1273,6 +1278,7 @@
               }
 
 case_body     : kWHEN when_args then compstmt cases {
+//mirko support.union($1, support.unwrapNewlineNode($4))?
                   $$ = new WhenNode($1.getPosition(), $2, $4, $5);
               }
 
@@ -1291,6 +1297,9 @@
                   Node node;
                   if ($3 != null) {
                      node = support.appendToBlock(support.node_assign($3, new GlobalVarNode(getPosition($1), "$!")), $5);
+                     if($5 != null) {
+                        node.setPosition(support.unwrapNewlineNode($5).getPosition());
+                     }
 		  } else {
 		     node = $5;
                   }
@@ -1334,7 +1343,7 @@
 
 string        : string1
               | string string1 {
-                  $$ = support.literal_concat($1, $2);
+                  $$ = support.literal_concat(getPosition($1), $1, $2);
               }
 
 string1       : tSTRING_BEG string_contents tSTRING_END {
@@ -1377,7 +1386,7 @@
 		  if (node == null) {
 		      $$ = new RegexpNode(getPosition($1), "", options & ~ReOptions.RE_OPTION_ONCE);
 		  } else if (node instanceof StrNode) {
-		      $$ = new RegexpNode(getPosition($1), ((StrNode) node).getValue(), options & ~ReOptions.RE_OPTION_ONCE);
+		      $$ = new RegexpNode($2.getPosition(), ((StrNode) node).getValue(), options & ~ReOptions.RE_OPTION_ONCE);
 		  } else {
 		      if (node instanceof DStrNode == false) {
 			  node = new DStrNode(getPosition($1)).add(new ArrayNode(getPosition($1), node));
@@ -1404,7 +1413,7 @@
 
 word	       : string_content
 	       | word string_content {
-                   $$ = support.literal_concat($1, $2);
+                   $$ = support.literal_concat(getPosition($1), $1, $2);
 	       }
 
 qwords	       : tQWORDS_BEG ' ' tSTRING_END {
@@ -1423,17 +1432,17 @@
 	       }
 
 string_contents: /* none */ {
-                   $$ = new StrNode(getPosition(null), "");
+                   $$ = new StrNode($<Token>0.getPosition(), "");
 	       }
 	       | string_contents string_content {
-                   $$ = support.literal_concat($1, $2);
+                   $$ = support.literal_concat(getPosition($1), $1, $2);
 	       }
 
 xstring_contents: /* none */ {
 		   $$ = null;
 	       }
 	       | xstring_contents string_content {
-                   $$ = support.literal_concat($1, $2);
+                   $$ = support.literal_concat(getPosition($1), $1, $2);
 	       }
 
 string_content : tSTRING_CONTENT {
@@ -1569,13 +1578,13 @@
                }
 
 f_args         : f_arg ',' f_optarg ',' f_rest_arg opt_f_block_arg {
-                   $$ = new ArgsNode(getPosition($1), $1, $3, ((Integer) $5.getValue()).intValue(), $6);
+                   $$ = new ArgsNode(support.union($1, $6), $1, $3, ((Integer) $5.getValue()).intValue(), $6);
                }
                | f_arg ',' f_optarg opt_f_block_arg {
                    $$ = new ArgsNode(getPosition($1), $1, $3, -1, $4);
                }
                | f_arg ',' f_rest_arg opt_f_block_arg {
-                   $$ = new ArgsNode(getPosition($1), $1, null, ((Integer) $3.getValue()).intValue(), $4);
+                   $$ = new ArgsNode(support.union($1, $4), $1, null, ((Integer) $3.getValue()).intValue(), $4);
                }
                | f_arg opt_f_block_arg {
                    $$ = new ArgsNode($<ISourcePositionHolder>1.getPosition(), $1, null, -1, $2);
@@ -1593,7 +1602,8 @@
                    $$ = new ArgsNode(getPosition($1), null, null, -1, $1);
                }
                | /* none */ {
-                   $$ = new ArgsNode(getPosition(null), null, null, -1, null);
+                   //take the last position from the lexer, this isn't entirely correct, but more accurate then getPosition(null). 
+                   $$ = new ArgsNode(lexer.getPosition(), null, null, -1, null);
                }
 
 f_norm_arg     : tCONSTANT {
Index: src/org/jruby/ast/Colon2Node.java
===================================================================
--- src/org/jruby/ast/Colon2Node.java	(revision 2701)
+++ src/org/jruby/ast/Colon2Node.java	(working copy)
@@ -30,7 +30,6 @@
  ***** END LICENSE BLOCK *****/
 package org.jruby.ast;
 
-import java.io.IOException;
 import java.util.List;
 
 import org.jruby.ast.types.INameNode;
@@ -42,25 +41,16 @@
  *
  * @author  jpetersen
  */
-public class Colon2Node extends Node implements INameNode {
+public class Colon2Node extends Colon3Node implements INameNode {
     static final long serialVersionUID = -3250593470034657352L;
 
     private final Node leftNode;
-    private String name;
 
     public Colon2Node(ISourcePosition position, Node leftNode, String name) {
-        super(position, NodeTypes.COLON2NODE);
+        super(position, NodeTypes.COLON2NODE, name);
         this.leftNode = leftNode;
-        this.name = name.intern();
     }
     
-    private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
-        in.defaultReadObject();
-        
-        // deserialized strings are not interned; intern it now
-        name = name.intern();
-    }
-
     /**
      * Accept for the visitor pattern.
      * @param iVisitor the visitor
@@ -77,14 +67,6 @@
         return leftNode;
     }
 
-    /**
-     * Gets the name.
-     * @return Returns a String
-     */
-    public String getName() {
-        return name;
-    }
-    
     public List childNodes() {
         return Node.createList(leftNode);
     }
@@ -93,7 +75,7 @@
         String result = "Colon2Node [";
         if (leftNode != null)
             result += leftNode;
-        result += name;
+        result += getName();
         return result+"]";
     }
 }
Index: src/org/jruby/ast/DVarNode.java
===================================================================
--- src/org/jruby/ast/DVarNode.java	(revision 2701)
+++ src/org/jruby/ast/DVarNode.java	(working copy)
@@ -33,6 +33,7 @@
 import java.io.IOException;
 import java.util.List;
 
+import org.jruby.ast.types.INameNode;
 import org.jruby.ast.visitor.NodeVisitor;
 import org.jruby.evaluator.Instruction;
 import org.jruby.lexer.yacc.ISourcePosition;
@@ -40,7 +41,7 @@
 /**
  * Access a dynamic variable (e.g. block scope local variable).
  */
-public class DVarNode extends Node {
+public class DVarNode extends Node implements INameNode {
     static final long serialVersionUID = -8479281167248673970L;
 
     // The name of the variable
@@ -99,6 +100,10 @@
         return name;
     }
     
+    public void setName(String name) {
+        this.name = name;
+    }
+    
     public List childNodes() {
         return EMPTY_LIST;
     }
Index: src/org/jruby/ast/DefsNode.java
===================================================================
--- src/org/jruby/ast/DefsNode.java	(revision 2701)
+++ src/org/jruby/ast/DefsNode.java	(working copy)
@@ -30,7 +30,6 @@
  ***** END LICENSE BLOCK *****/
 package org.jruby.ast;
 
-import java.io.IOException;
 import java.util.List;
 
 import org.jruby.ast.visitor.NodeVisitor;
@@ -42,31 +41,16 @@
  *
  * @author  jpetersen
  */
-public class DefsNode extends Node {
+public class DefsNode extends MethodDefNode {
     static final long serialVersionUID = -4472719020304670080L;
 
     private final Node receiverNode;
-    private String name;
-    private final Node argsNode;
-    private final StaticScope scope;
-    private final Node bodyNode;
-
-    public DefsNode(ISourcePosition position, Node receiverNode, String name, Node argsNode, 
+    public DefsNode(ISourcePosition position, Node receiverNode, ArgumentNode nameNode, ArgsNode argsNode, 
             StaticScope scope, Node bodyNode) {
-        super(position, NodeTypes.DEFSNODE);
+        super(position, nameNode, argsNode, scope, bodyNode, NodeTypes.DEFSNODE);
+        
         this.receiverNode = receiverNode;
-        this.name = name.intern();
-        this.argsNode = argsNode;
-        this.scope = scope;
-        this.bodyNode = bodyNode;
     }
-    
-    private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
-        in.defaultReadObject();
-        
-        // deserialized strings are not interned; intern it now
-        name = name.intern();
-    }
 
     /**
      * Accept for the visitor pattern.
@@ -77,40 +61,6 @@
     }
 
     /**
-     * Gets the argsNode.
-     * @return Returns a Node
-     */
-    public Node getArgsNode() {
-        return argsNode;
-    }
-
-    /**
-     * Get the static scoping information.
-     * 
-     * @return the scoping info
-     */
-    public StaticScope getScope() {
-        return scope;
-    }
-    
-    /**
-     * Gets the body of this definition.
-     * 
-     * @return the contents
-     */
-    public Node getBodyNode() {
-        return bodyNode;
-    }
-
-    /**
-     * Gets the name.
-     * @return Returns a String
-     */
-    public String getName() {
-        return name;
-    }
-
-    /**
      * Gets the receiverNode.
      * @return Returns a Node
      */
@@ -119,7 +69,7 @@
     }
     
     public List childNodes() {
-        return Node.createList(receiverNode, argsNode, bodyNode);
+        return Node.createList(receiverNode, nameNode, argsNode, bodyNode);
     }
 
 }
Index: src/org/jruby/ast/ArgumentNode.java
===================================================================
--- src/org/jruby/ast/ArgumentNode.java	(revision 2701)
+++ src/org/jruby/ast/ArgumentNode.java	(working copy)
@@ -30,6 +30,7 @@
 import java.io.IOException;
 import java.util.List;
 
+import org.jruby.ast.types.INameNode;
 import org.jruby.ast.visitor.NodeVisitor;
 import org.jruby.evaluator.Instruction;
 import org.jruby.lexer.yacc.ISourcePosition;
@@ -38,7 +39,7 @@
  * Simple Node that allows editor projects to keep position info in AST
  * (evaluation does not need this).
  */
-public class ArgumentNode extends Node {
+public class ArgumentNode extends Node implements INameNode {
     private static final long serialVersionUID = -6375678995811376530L;
     private String identifier;
     
@@ -61,6 +62,10 @@
     public String getName() {
         return identifier;
     }
+    
+    public void setName(String name) {
+        this.identifier = name;
+    }
 
     public List childNodes() {
         return EMPTY_LIST;
Index: src/org/jruby/ast/InstAsgnNode.java
===================================================================
--- src/org/jruby/ast/InstAsgnNode.java	(revision 2701)
+++ src/org/jruby/ast/InstAsgnNode.java	(working copy)
@@ -86,4 +86,8 @@
         return createList(getValueNode());
     }
 
+	public void setName(String name) {
+		this.name = name;
+	}
+
 }
Index: src/org/jruby/ast/InstVarNode.java
===================================================================
--- src/org/jruby/ast/InstVarNode.java	(revision 2701)
+++ src/org/jruby/ast/InstVarNode.java	(working copy)
@@ -87,5 +87,9 @@
     public List childNodes() {
         return EMPTY_LIST;
     }
+    
+    public void setName(String name){
+    		this.name = name;
+    }
 
 }
Index: src/org/jruby/ast/Colon3Node.java
===================================================================
--- src/org/jruby/ast/Colon3Node.java	(revision 2701)
+++ src/org/jruby/ast/Colon3Node.java	(working copy)
@@ -57,6 +57,11 @@
         this.name = name.intern();
     }
     
+    public Colon3Node(ISourcePosition position, int id, String name) {
+        super(position, id);
+        this.name = name.intern();
+    }
+    
     private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
         in.defaultReadObject();
         
@@ -84,4 +89,8 @@
         return EMPTY_LIST;
     }
 
+	public void setName(String name) {
+		this.name = name;
+	}
+
 }
Index: src/org/jruby/ast/ClassNode.java
===================================================================
--- src/org/jruby/ast/ClassNode.java	(revision 2701)
+++ src/org/jruby/ast/ClassNode.java	(working copy)
@@ -49,12 +49,12 @@
 public class ClassNode extends Node implements IScopingNode {
     static final long serialVersionUID = -1369424045737867587L;
 
-    private final Node cpath;
+    private final Colon3Node cpath;
     private final StaticScope scope;
     private final Node bodyNode;
     private final Node superNode;
     
-    public ClassNode(ISourcePosition position, Node cpath, StaticScope scope, Node bodyNode, Node superNode) {
+    public ClassNode(ISourcePosition position, Colon3Node cpath, StaticScope scope, Node bodyNode, Node superNode) {
         super(position, NodeTypes.CLASSNODE);
         this.cpath = cpath;
         this.scope = scope;
@@ -92,7 +92,7 @@
      * Gets the className.
      * @return Returns representation of class path+name
      */
-    public Node getCPath() {
+    public Colon3Node getCPath() {
         return cpath;
     }
 
Index: src/org/jruby/ast/ConstNode.java
===================================================================
--- src/org/jruby/ast/ConstNode.java	(revision 2701)
+++ src/org/jruby/ast/ConstNode.java	(working copy)
@@ -84,4 +84,8 @@
         return "ConstNode [" + name + "]";
     }
 
+	public void setName(String name) {
+		this.name = name;
+	}
+
 }
Index: src/org/jruby/ast/MethodDefNode.java
===================================================================
--- src/org/jruby/ast/MethodDefNode.java	(revision 0)
+++ src/org/jruby/ast/MethodDefNode.java	(revision 0)
@@ -0,0 +1,95 @@
+/***** BEGIN LICENSE BLOCK *****
+ * Version: CPL 1.0/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Common Public
+ * License Version 1.0 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of
+ * the License at http://www.eclipse.org/legal/cpl-v10.html
+ *
+ * Software distributed under the License is distributed on an "AS
+ * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
+ * implied. See the License for the specific language governing
+ * rights and limitations under the License.
+ *
+ * Copyright (C) 2006 Mirko Stocker <me@misto.ch>
+ * 
+ * Alternatively, the contents of this file may be used under the terms of
+ * either of the GNU General Public License Version 2 or later (the "GPL"),
+ * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the CPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the CPL, the GPL or the LGPL.
+ ***** END LICENSE BLOCK *****/
+package org.jruby.ast;
+
+/**
+ * Base class for Defn- and DefsNode 
+ * 
+ * @author  jpetersen
+ */
+import org.jruby.ast.types.INameNode;
+import org.jruby.lexer.yacc.ISourcePosition;
+import org.jruby.parser.StaticScope;
+
+public abstract class MethodDefNode extends Node implements INameNode {
+
+	protected final ArgumentNode nameNode;
+	protected final ArgsNode argsNode;
+	protected final StaticScope scope;
+	protected final Node bodyNode;
+
+	public MethodDefNode(ISourcePosition position, ArgumentNode nameNode, ArgsNode argsNode, StaticScope scope, Node bodyNode, int id) {
+		super(position, id);
+		this.nameNode = nameNode;
+		this.argsNode = argsNode;
+		this.scope = scope;
+		this.bodyNode = bodyNode;
+	}
+
+	/**
+	 * Gets the argsNode.
+	 * @return Returns a Node
+	 */
+	public ArgsNode getArgsNode() {
+	    return argsNode;
+	}
+
+	/**
+	 * Get the static scoping information.
+	 * 
+	 * @return the scoping info
+	 */
+	public StaticScope getScope() {
+	    return scope;
+	}
+
+	/**
+	 * Gets the body of this class.
+	 * 
+	 * @return the contents
+	 */
+	public Node getBodyNode() {
+	    return bodyNode;
+	}
+
+	/**
+	 * Gets the name's node.
+	 * @return Returns an ArgumentNode
+	 */
+	public ArgumentNode getNameNode() {
+	    return nameNode;
+	}
+
+	/**
+	 * Gets the name.
+	 * @return Returns a String
+	 */
+	public String getName() {
+	    return nameNode.getName();
+	}
+}
\ No newline at end of file
Index: src/org/jruby/ast/ClassVarNode.java
===================================================================
--- src/org/jruby/ast/ClassVarNode.java	(revision 2701)
+++ src/org/jruby/ast/ClassVarNode.java	(working copy)
@@ -33,6 +33,7 @@
 import java.io.IOException;
 import java.util.List;
 
+import org.jruby.ast.types.INameNode;
 import org.jruby.ast.visitor.NodeVisitor;
 import org.jruby.evaluator.Instruction;
 import org.jruby.lexer.yacc.ISourcePosition;
@@ -42,7 +43,7 @@
  * 
  * @author  jpetersen
  */
-public class ClassVarNode extends Node {
+public class ClassVarNode extends Node implements INameNode{
     static final long serialVersionUID = -228883683599457381L;
 
     private String name;
@@ -78,5 +79,9 @@
     public List childNodes() {
         return EMPTY_LIST;
     }
+    
+    public void setName(String name){
+    		this.name = name;
+    }
 
 }
Index: src/org/jruby/ast/Node.java
===================================================================
--- src/org/jruby/ast/Node.java	(revision 2701)
+++ src/org/jruby/ast/Node.java	(working copy)
@@ -16,6 +16,7 @@
  * Copyright (C) 2002-2004 Anders Bengtsson <ndrsbngtssn@yahoo.se>
  * Copyright (C) 2004 Thomas E Enebo <enebo@acm.org>
  * Copyright (C) 2004 Stefan Matthias Aust <sma@3plus4.de>
+ * Copyright (C) 2006 Thomas Corbat <tcorbat@hsr.ch>
  * 
  * Alternatively, the contents of this file may be used under the terms of
  * either of the GNU General Public License Version 2 or later (the "GPL"),
@@ -33,6 +34,8 @@
 
 import java.io.Serializable;
 import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
 import java.util.List;
 
 import org.jruby.ast.visitor.NodeVisitor;
@@ -41,6 +44,7 @@
 import org.jruby.evaluator.InstructionContext;
 import org.jruby.lexer.yacc.ISourcePosition;
 import org.jruby.lexer.yacc.ISourcePositionHolder;
+import org.jruby.lexer.yacc.SourcePosition;
 
 /**
  *
@@ -56,6 +60,7 @@
     public InstructionBundle instruction;
 
     private ISourcePosition position;
+    private ArrayList comments;
 
     public Node(ISourcePosition position, int id) {
         this.position = position;
@@ -69,18 +74,19 @@
         return position;
     }
 
-	public void setPosition(ISourcePosition position) {
-		this.position = position;
-	}
+    public void setPosition(ISourcePosition position) {
+        this.position = position;
+    }
     
-	public abstract Instruction accept(NodeVisitor visitor);
-	public abstract List childNodes();
+    public abstract Instruction accept(NodeVisitor visitor);
+    public abstract List childNodes();
 
     static void addNode(Node node, List list) {
         if (node != null)
             list.add(node);
     }
 
+    //TODO: Change to variable parameter list method once we have Java 1.5
     protected static List createList(Node node) {
         List list = new ArrayList();
         Node.addNode(node, list);
@@ -98,6 +104,12 @@
         Node.addNode(node3, list);
         return list;
     }
+
+    protected  static List createList(Node node1, Node node2, Node node3, Node node4) {
+        List list = createList(node1, node2, node3);
+        Node.addNode(node4, list);
+        return list;
+    }    
     
     public String toString() {
         return getNodeName() + "[]";
@@ -109,4 +121,52 @@
         String nodeType = name.substring(i + 1);
         return nodeType;
     }
+    
+    public void addComment(CommentNode comment) {
+        if(comments == null) {
+            comments = new ArrayList();
+        }
+        comments.add(comment);
+    }
+    
+    public void addComments(Collection comments) {
+        if(this.comments == null) {
+            this.comments = new ArrayList();
+        }
+        this.comments.addAll(comments);
+    }
+    
+    public Collection getComments() {
+        if(comments == null) {
+            return EMPTY_LIST;
+        }
+        return comments;
+    }
+    
+    public boolean hasComments() {
+        return comments != null && !comments.isEmpty();
+    }
+    
+    public ISourcePosition getPositionIncludingComments() {
+        if(position == null || !hasComments()) {
+            return position;
+        }
+        
+        String fileName = position.getFile();
+        int startOffset = position.getStartOffset();
+        int endOffset = position.getEndOffset();
+        int startLine = position.getStartLine();
+        int endLine = position.getEndLine();
+        
+        ISourcePosition commentIncludingPos = new SourcePosition(fileName, startLine, endLine, startOffset, endOffset);
+        
+        Iterator commentItr = comments.iterator();
+        while(commentItr.hasNext()) {
+            ISourcePosition currentPos = ((CommentNode)commentItr.next()).getPosition();
+            commentIncludingPos = commentIncludingPos.union(currentPos);
+        }       
+
+        return commentIncludingPos;
+    }
+
 }
Index: src/org/jruby/ast/ModuleNode.java
===================================================================
--- src/org/jruby/ast/ModuleNode.java	(revision 2701)
+++ src/org/jruby/ast/ModuleNode.java	(working copy)
@@ -44,11 +44,11 @@
 public class ModuleNode extends Node implements IScopingNode {
     static final long serialVersionUID = 4938115602547834310L;
 
-    private final Node cpath;
+    private final Colon3Node cpath;
     private final StaticScope scope;
     private final Node bodyNode;
 
-    public ModuleNode(ISourcePosition position, Node cpath, StaticScope scope, Node bodyNode) {
+    public ModuleNode(ISourcePosition position, Colon3Node cpath, StaticScope scope, Node bodyNode) {
         super(position, NodeTypes.MODULENODE);
         this.cpath = cpath;
         this.scope = scope;
@@ -85,7 +85,7 @@
      * Gets the name.
      * @return Representation of the module path+name
      */
-    public Node getCPath() {
+    public Colon3Node getCPath() {
         return cpath;
     }
     
Index: src/org/jruby/ast/IScopingNode.java
===================================================================
--- src/org/jruby/ast/IScopingNode.java	(revision 2701)
+++ src/org/jruby/ast/IScopingNode.java	(working copy)
@@ -29,5 +29,5 @@
 package org.jruby.ast;
 
 public interface IScopingNode {
-    public Node getCPath();
+    public Colon3Node getCPath();
 }
Index: src/org/jruby/ast/DefnNode.java
===================================================================
--- src/org/jruby/ast/DefnNode.java	(revision 2701)
+++ src/org/jruby/ast/DefnNode.java	(working copy)
@@ -44,23 +44,15 @@
  * 
  * @author  jpetersen
  */
-public class DefnNode extends Node {
+public class DefnNode extends MethodDefNode {
     static final long serialVersionUID = -7634791007500033454L;
 
-    private final ArgumentNode nameNode;
-    private final Node argsNode;
-    private final StaticScope scope;
-    private final Node bodyNode;
     private final Visibility visibility;
     
-    public DefnNode(ISourcePosition position, ArgumentNode nameNode, Node argsNode, 
+    public DefnNode(ISourcePosition position, ArgumentNode nameNode, ArgsNode argsNode, 
             StaticScope scope, Node bodyNode, Visibility visibility) {
-        super(position, NodeTypes.DEFNNODE);
+        super(position, nameNode, argsNode, scope, bodyNode, NodeTypes.DEFNNODE);
         
-        this.nameNode = nameNode;
-        this.argsNode = argsNode;
-        this.scope = scope;
-        this.bodyNode = bodyNode;
         this.visibility = visibility;
     }
 
@@ -69,44 +61,6 @@
     }
 
     /**
-     * Gets the argsNode.
-     * @return Returns a Node
-     */
-    public Node getArgsNode() {
-        return argsNode;
-    }
-
-    /**
-     * Get the static scoping information.
-     * 
-     * @return the scoping info
-     */
-    public StaticScope getScope() {
-        return scope;
-    }
-    
-    /**
-     * Gets the body of this class.
-     * 
-     * @return the contents
-     */
-    public Node getBodyNode() {
-        return bodyNode;
-    }
-
-    public ArgumentNode getNameNode() {
-        return nameNode;
-    }
-
-    /**
-     * Gets the name.
-     * @return Returns a String
-     */
-    public String getName() {
-        return nameNode.getName();
-    }
-
-    /**
      * Gets the noex.
      * @return Returns a int
      */
