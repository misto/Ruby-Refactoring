<!--  This script will not be uploaded to the server.
      PLEASE DO NOT MODIFY 
      If you modify this script it is likely that the build will not work on the server
-->
<project name="Build Facade" default="main">
	
	<target name="-properties">		
		
		<!-- versioning -->
		<property name="build.version" value="HEAD"/>
		<property file="releases/${build.version}.properties" />
		<tstamp>
		      <format property="version.qualifier" pattern="yyyyMMddHHmm" timezone="GMT" unit="minute"/>
		</tstamp>
		
		<property name="buildTypePresentation" value=""/>
		<property name="version.full" value="${version}.${version.qualifier}${buildTypePresentation}"/>

		<!-- includes -->
		<property file="build_local.properties" />
		<property file="pluginbuilder.config" />
		
		<available type="dir" file="${eclipseDir}/plugins" property="eclipseDir.plugins.exists"/>
		<fail message="Could not find directory ${eclipseDir}/plugins. Please check eclipseDir in build_local.properties" unless="eclipseDir.plugins.exists"/>
		
		
		<!-- determine buildfile -->
		<fileset dir="${eclipseDir}/plugins" includes="org.eclipse.pde.build_*/scripts/build.xml" id="pde.plugin.path" />
		<pathconvert property="buildfile" refid="pde.plugin.path" />
		<fail message="Could not find org.eclipse.pde.build_*/scripts/build.xml in ${eclipseDir}/plugins. PDE not installed?" unless="buildfile"/>
		
		<!-- set defaults -->
		<property name="buildTarget" value="main"/>
		<property name="verboseAnt" value="-Ddummy=true"/>
		
		<!-- check if clean should be called -->
		<condition property="is.clean">
			<or>
				<equals arg1="main" arg2="${buildTarget}" trim="true"/>
		   		<equals arg1="fetch" arg2="${buildTarget}" trim="true"/>
			</or>
		</condition>
	</target>
	
	<target name="-clean" if="is.clean">
		<echo level="info" message="Cleaning directory ${buildDirectory}"/>
		<delete dir="${buildDirectory}" verbose="false"/>
		<mkdir dir="${buildDirectory}"/>
	</target>
	
	<target name="-build" depends="-properties,-clean">
		<property name="buildResultsDirectory" value="${buildDirectory}/results" />
		<java classname="org.eclipse.core.launcher.Main" fork="true" failonerror="true">
			<arg value="-ws" />
			<arg value="${ws}" />
			<arg value="-os" />
			<arg value="${os}" />
			<arg value="-application" />
			<arg value="org.eclipse.ant.core.antRunner" />
			<arg value="-buildfile" />
			<arg value="${buildfile}" />
			<arg value="${buildTarget}" />
			<arg value="-data" />
			<arg value="${buildDirectory}/workspace" />
			<arg value="${verboseAnt}"/>
			<jvmarg value="-Dbasews=${ws}" />
			<jvmarg value="-Dbaseos=${os}" />
			<jvmarg value="-Dbasearch=${arch}" />
			<jvmarg value="-Dbuilder=${buildHome}/build-files" />
			<jvmarg value="-DjavacFailOnError=true"/>
			<jvmarg value="-DbuildDirectory=${buildDirectory}"/>
			<jvmarg value="-DbuildResultsDirectory=${buildResultsDirectory}"/>
			<jvmarg value="-DbaseLocation=${eclipseDir}"/>
			<jvmarg value="-DbuildHome=${buildHome}"/>
			<jvmarg value="-Dversion.full=${version.full}"/>
			<jvmarg value="-Dversion.qualifier=${version.qualifier}"/>
			<jvmarg value="-DbuildType=${buildType}"/>
			<jvmarg value="-DfetchTag=${fetchTag}"/>
		 <jvmarg value="-Dtest.eclipse.zip=${test.eclipse.zip}"/>

			<classpath>
				<pathelement location="${eclipseDir}/startup.jar" />
			</classpath>
		</java>
	</target>
	
	<target name="main-cc"
			description="This target is suited to be run from cruisecontrol. The property 'label' is expected to be set from cruisecontrol.">
		<property name="version.full" value="${label}"/> 
		<!-- TODO: extract qualifier correctly from label -->
		<property name="version.qualifier" value="${label}"/>		
		<antcall target="-build"/>
	</target>
	
	<target name="main" description="Run the main target of customTargets.xml.">
		<property name="buildTarget" value="main"/>
		<antcall target="-build"/>
	</target>

	<target name="fetch" description="Run the fetch target of customTargets.xml.">
		<property name="buildTarget" value="fetch"/>
		<antcall target="-build"/>
	</target>	
	
	<target name="generate" description="Run the generate target of customTargets.xml.">
		<property name="buildTarget" value="generate"/>
		<antcall target="-build"/>
	</target>
	
	<target name="process" description="Run the process target of customTargets.xml.">
		<property name="buildTarget" value="process"/>
		<antcall target="-build"/>
	</target>
			
	<target name="assemble" description="Run the assemble target of customTargets.xml.">
		<property name="buildTarget" value="assemble"/>
		<antcall target="-build"/>
	</target>
	
	<target name="postBuild" description="Run the postBuild target of customTargets.xml.">
		<property name="buildTarget" value="postBuild"/>
		<antcall target="-build"/>
	</target>

</project>